# util functions
is_exec() { # {{{1
  [ x"$1" = x"" ] && return 1
  type $1 >/dev/null 2>&1
  return $?
}
is_win() { # {{{1
  [[ $OSTYPE == cygwin* ]] && return 0
  return 1
}
is_mac() { # {{{1
  [[ $OSTYPE == darwin* ]] && return 0
  return 1
}
is_freebsd() { # {{{1
  [[ $OSTYPE == freebsd* ]] && return 0
  return 1
}
is_colinux() { # {{{1
  [ "$ENV_WORKING" = 'colinux' ] && return 0
  return 1
}
soft_source() { # {{{1
  [ -e "$1" ] && source "$1"
  return $?
}
source_all() {
  for f in $*; do source $f; done
}
remove_path() { # {{{1
  # local rmv
  # for rmv in $* ; do
  #   PATH=`echo $PATH| sed -e 's!'$rmv'!!' -e 's/::/:/'`
  # done
  eval "export PATH=$(perl -e '$p=$ENV{PATH};while($v=shift){$p=~s/^$v:|:$v:|:$v$/:/g}$p=~s/::/:/g;print $p;' $*)"
  return 0
}
# http://d.hatena.ne.jp/tyru/20090526/1243339840
env_unique() { # {{{1
  if [ $# = 0 ]; then return; fi
  local env="$1"
  local sep="$2"

  eval "export $env=$(perl -e 'my ($e, $s) = (shift, shift || q(:)); #\
        for(split $s, $ENV{$e}) { #\
            $h{$_} or $h{$_}=++$i #\
        } #\
        $,=$s; #\
        %h=reverse %h; #\
        print map { $h{$_} } #\
              sort { $a <=> $b } keys %h' \
    $env $sep)"
}

# __END__ {{{1
# vim: fdm=marker sw=2 ts=2 ft=zsh et:
