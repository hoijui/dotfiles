# init # {{{1
# [ $SHLVL -gt 1 ] && return 0
[ -f $HOME/.shrc.functions ] && source $HOME/.shrc.functions
[ -f $HOME/.shrc.refe ] && source $HOME/.shrc.refe
if [ -n "$ZSH_NAME" ]; then
  SHELL_NAME=zsh
# elif [ -n $BASH ]; then
else
  SHELL_NAME=bash
fi

shrc_section_title "OS settings" # {{{1
case $OSTYPE in
  cygwin*)
    export CYGWIN='cygwin'
    soft_source $HOME/.shrc.cygwin
    PATH=$HOME/bin/windows:$PATH
    ;;
  darwin*)
    soft_source $HOME/.shrc.osx
    if [ "$LOGIN_FROM" != "Finder" ] ; then
      remove_path /usr/local/bin /usr/bin /bin
      PATH=$PATH:/usr/local/bin:/usr/bin:/bin
      export PYTHONPATH=/usr/local/lib/python:$PYTHONPATH
      PATH=$HOME/bin/mac:$PATH:/Applications/android-sdk-mac_x86/tools:/Applications/android-sdk-mac_x86/platform-tools
      [ "$LANG" = "ja_JP" ] && export LANG=ja_JP.UTF-8

    fi
    ;;
  freebsd*)
    soft_source $HOME/.shrc.bsd
    ;;
  linux*)
    soft_source $HOME/.shrc.linux
    ;;
  solaris*)
    soft_source $HOME/.shrc.solaris
    ;;
  *)
    ;;
esac

shrc_section_title "aliases" # {{{1
is_exec rails && alias r=rails
alias jsprove='prove --ext=.t.js --exec=node'
alias phpprove='prove --ext=.t.php --exec=php'

shrc_section_title "block multi load" # {{{1
# [ x$__VMLANG_INITIALIZED != x ] && return 0
# export __VMLANG_INITIALIZED=1
PATH=$HOME/bin:$HOME/.bin:$PATH

shrc_section_title "languages" # {{{1
if [ -z "$SHRC_LANGUAGE_LOADED" ]; then
  shrc_section_title "for perl" # {{{2
  if [ -e ~/.plenv ]; then
    PATH=$HOME/.plenv/bin:$PATH
    eval $(plenv init -)
  else
    export PERLBREW_ROOT=$HOME/.perlbrew
    if [ -s $PERLBREW_ROOT/etc/bashrc ] ;then
      PATH=$PERLBREW_ROOT/bin:$PATH
      [ -z "$SHRC_LANGUAGE_LOADED" ] && source $PERLBREW_ROOT/etc/bashrc
    fi
  fi

  shrc_section_title "for Python" # {{{2
  if [ -z "$SHRC_LANGUAGE_LOADED" ] ; then
    export PYTHONBREW_ROOT=$HOME/.pythonbrew
    [ -e $PYTHONBREW_ROOT/etc/bashrc ] && source $PYTHONBREW_ROOT/etc/bashrc
    # export PYTHONPATH=/usr/local/lib/python2.5/site-packages:$ROOTSYS/lib
    # export PYTHONPATH=~/.lib/python:$PYTHONPATH
    export PYTHONSTARTUP=~/.pyrc
    export PIP_DOWNLOAD_CACHE="$HOME/.pip_cache"
    if [ -e "/usr/local/Library/Homebrew" ] ; then
      export PYTHONPATH=/usr/local/lib/python:$PYTHONPATH
    fi
  fi

  shrc_section_title "for Ruby" # {{{2
  if [ -e $HOME/.rbenv ]; then
    PATH="$HOME/.rbenv/bin:$PATH"
    if [ ~/.rbenv/bin/rbenv -nt ~/.rbenv.$SHELL_NAME -o ! -e ~/.rbenv.$SHELL_NAME ]; then
      rbenv init - > ~/.rbenv.$SHELL_NAME
      if_compile ~/.rbenv.$SHELL_NAME
    fi
    source ~/.rbenv.$SHELL_NAME
    # eval "$(rbenv init -)"
    # soft_source ~/.rbenv/completions/rbenv.$SHELL_NAME
    rvm() {
      if [[ $1 == 'use' ]]; then
        rbenv shell $2
      fi
    }
  else
    soft_source $HOME/.rvm/scripts/rvm
  fi

  shrc_section_title "for node.js" # {{{2
  if [ -e ~/.nodebrew ]; then
    PATH=$HOME/.nodebrew/current/bin:$PATH
    export NODE_PATH=$HOME/.nodebrew/current/lib/node:$HOME/.nodebrew/current/lib/node_modules
    # eval "$(npm completion 2>/dev/null)"
    # alias nodebrew='CFLAGS="-D__DARWIN_64_BIT_INO_T" CXXFLAGS="-D__DARWIN_64_BIT_INO_T" nodebrew'
  fi

  shrc_section_title "java" # {{{2
  if ! is_mac ; then
    _JAVA_OPTIONS="$_JAVA_OPTIONS -Dawt.useSystemAAFontSettings=lcd"

    if [ "$LANG" = 'ja_JP.UTF-8' ] ; then
      _JAVA_OPTIONS="$_JAVA_OPTIONS -Dfile.encoding=UTF-8"
    fi
    export _JAVA_OPTIONS

    if [ -d /usr/lib/jvm/java-6-sun ];then
      JAVA_HOME=/usr/lib/jvm/java-6-sun
      export JAVA_HOME
      if [ -d $JAVA_HOME/jre ];then
        JRE_HOME=$JAVA_HOME/jre
        export JRE_HOME
      fi
    fi
  # else
    # _JAVA_OPTIONS="$_JAVA_OPTIONS -Dawt.useSystemAAFontSettings=on"
    # _JAVA_OPTIONS="$_JAVA_OPTIONS -Dfile.encoding=UTF-8"
    # export _JAVA_OPTIONS
  fi

  shrc_section_title "php" # {{{2
  # must be after eval $(rbenv init)
  if [ -e $HOME/.phpenv ]; then
    if [[ $PATH =~ \.rbenv/bin ]]; then
      PATH=$(echo $PATH | sed 's@.rbenv/bin@.rbenv/bin:'$HOME'/.phpenv/bin@')
    else
      PATH=$HOME/.phpenv/bin:$PATH
    fi
    if [ ~/.phpenv/bin/phpenv -nt ~/.phpenv.$SHELL_NAME -o ! -e ~/.phpenv.$SHELL_NAME ]; then
      phpenv init - > ~/.phpenv.$SHELL_NAME
      if_compile ~/.phpenv.$SHELL_NAME
    fi
    source ~/.phpenv.$SHELL_NAME
    # eval "$(phpenv init -)"
    # soft_source ~/.phpenv/completions/rbenv.$SHELL_NAME

    # PATH=$PATH:$HOME/.php-build/bin
    # export PHP_BUILD_CONFIGURE_OPTS="--enable-fileinfo --enable-hash --enable-json --enable-bcmath --with-bz2 --enable-ctype --with-iconv --with-gettext --with-pcre-regex --enable-phar --enable-simplexml --enable-dom --with-libxml-dir=/usr --enable-tokenizer --with-mhash=yes --with-gd "
    # export PHP_BUILD_CONFIGURE_OPTS="--enable-fileinfo --enable-hash --enable-json --enable-sysvmsg --enable-bcmath --with-bz2 --enable-ctype --with-iconv --with-gettext --with-pcre-regex --enable-phar --enable-simplexml --enable-dom --with-libxml-dir=/usr --enable-tokenizer --with-mhash=yes --with-gd --with-xpm-dir=/usr/X11R6 --with-png-dir=/usr --with-snmp=/usr"
    # --with-enchant=/usr --enable-gd-native-ttf --with-freetype-dir=/usr --with-t1lib=/usr --with-gmp=/usr --with-imap=/usr --with-imap-ssl --enable-intl --with-onig=/usr
    # --enable-fpm --without-mm
    export PHP_BUILD_CONFIGURE_OPTS="--enable-fileinfo --enable-hash --enable-json --enable-bcmath --with-bz2 --enable-ctype --with-iconv --with-gettext --with-pcre-regex --enable-phar --enable-simplexml --enable-dom --with-libxml-dir=/usr --enable-tokenizer --with-mhash=yes --with-gd --enable-calendar --enable-cli --enable-gd-native-ttf --enable-mbregex --enable-wddx --enable-zend-multibyte --with-iodbc --with-ldap-sasl --with-ldap --with-pgsql"
  fi
  ## cakephp {{{3
  cake-dispatch() { #{{{
    local mode=$1 rlwrap=$(which rlwrap 2>/dev/null)
    local cwd=$(pwd)
    local appdir=$cwd/app
    while [ 1 ] ; do
      [ -e $appdir/Console/cake ] && break
      [ -e $appdir/console/cake ] && break
      if [ "/" = "$appdir" ] ; then
        echo "command not found"
        return 1
      fi
      appdir=$(dirname $appdir)
    done
    shift

    [ x$ENV = x ] && ENV=development
    case $mode in
      console)
        if [ -x $appdir/Console/cake ] ; then
          (cd "$appdir"; ENV=$ENV $rlwrap Console/cake $*)
        elif [ -x $appdir/console/cake ]; then
          (cd "$appdir"; ENV=$ENV $rlwrap console/cake $*)
        else
          echo "command not found $*"
        fi
        ;;
      clear-cache)
        (cd "$appdir"; [ -e ./tmp/cache ] && find ./tmp/cache -type f -name 'cake_*' -exec rm {} \;)
        ;;
      *)
        echo "command not found $*"
        ;;
    esac
  } #}}}
  cakec() {
    cake-dispatch console $*
  }
  bake() {
    cake-dispatch console bake $*
  }
  cake-cc() {
    cake-dispatch clear-cache $*
  }
  ## }}}

  # scala {{{2
  if [ -e ~/.svm ]; then
    export SCALA_HOME=~/.svm/current/rt
    PATH=$SCALA_HOME/bin:$HOME/.svm/:$PATH
  fi

fi
shrc_section_title "etc" # {{{2
# c/c++ library path
#export PATH=~/bin:$QTDIR/bin:$KDEDIR/bin:/usr/local/bin:/usr/local/X11R7/bin:/usr/bin:/bin:./:/usr/local/sbin:/usr/sbin:/sbin:$ROOTSYS/bin:$TETEX_BIN_PATH:/usr/local/jre/bin:/usr/local/RealPlayer
#export LD_LIBRARY_PATH=/usr/local/X11R7/lib:$QTDIR/lib:$KDEDIR/lib:/usr/local/lib:/usr/lib:/lib:$ROOTSYS/lib:/usr/local/firefox

# for KDE/QT
#export KDEDIR=/usr/local/kde
#export QTDIR=/usr/local/qt

# for teTeX
#export TETEX_PATH=/usr/local/teTeX
#export TEXMF=$TETEX_PATH/share/texmf
#export TETEX_BIN_PATH=$TETEX_PATH/bin/i686-pc-linux-gnu

shrc_section_title "Mozilla Setting" # {{{2
export MOZ_NO_REMOTE=true

export PATH
export MANPATH

shrc_section_title "finalize" # {{{1
env_unique PATH
env_unique MANPATH
export SHRC_LANGUAGE_LOADED=1

# __END__ {{{1
# vim: fdm=marker sw=2 ts=2 ft=zsh et:
