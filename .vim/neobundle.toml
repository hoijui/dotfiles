[[plugins]]
repository = 'itchyny/lightline.vim'

[[plugins]]
repository = 'freeo/vim-kalisi'

[[plugins]]
repository = 'tpope/vim-vividchalk'

[[plugins]]
repository = 'tomasr/molokai'

[[plugins]]
repository = 'mopp/mopkai.vim'

[[plugins]]
repository = 'mrkn/mrkn256.vim'

[[plugins]]
repository = 'fmoralesc/vim-vitamins'

[[plugins]]
repository = 'morhetz/gruvbox'

[[plugins]]
repository = 'vim-scripts/Lucius'

[[plugins]]
repository = 'jaromero/vim-monokai-refined'

[[plugins]]
repository = 'freeo/vim-kalisi'

[[plugins]]
repository = 'w0ng/vim-hybrid'

[[plugins]]
repository = 'Shougo/context_filetype.vim'

[[plugins]]
repository = 'Shougo/tabpagebuffer.vim'

[[plugins]]
repository = 'Shougo/vimfiler.vim', {

[[plugins]]
repository = 'Shougo/vimproc.vim', {
  \ 'build' : {
  \ 'windows' : executable('nmake') ?
  \   $VCVARSALL . ' ' . $PROCESSOR_ARCHITECTURE . ' & ' . 'nmake -f Make_msvc.mak nodebug=1'
  \   : 'make -f make_mingw' . (has('win64') ? 64 : 32) . '.mak' ,
  \ 'cygwin' : 'make -f make_cygwin.mak',
  \ 'mac'    : 'make -f make_mac.mak',
  \ 'unix'   : 'make -f make_unix.mak',
  \ }}

[[plugins]]
repository = 'Shougo/vimshell.vim'

[[plugins]]
repository = "osyo-manga/unite-filters-collection"

[[plugins]]
repository = 'pekepeke/vim-gitcomplete', 'develop'

[[plugins]]
repository = 'kana/vim-altr'

[[plugins]]
repository = 'kana/vim-fakeclip'

[[plugins]]
repository = 'kana/vim-smartchr'

[[plugins]]
repository = 'kana/vim-submode'

[[plugins]]
repository = 'kana/vim-niceblock'

[[plugins]]
repository = 'tyru/vim-altercmd'

[[plugins]]
repository = 'cohama/lexima.vim'

# [[plugins]]
# repository = 'kana/vim-smartinput'

[[plugins]]
repository = 'chikatoike/concealedyank.vim'

[[plugins]]
repository = 'pekepeke/quickfixstatus'

[[plugins]]
repository = 'cohama/vim-hier'

[[plugins]]
repository = 'tpope/vim-repeat'

[[plugins]]
repository = 'tpope/vim-surround'

[[plugins]]
repository = 't9md/vim-surround_custom_mapping'

# " TODO : http://qiita.com/hokorobi/items/f1bd7b52b1049a652dc2
[[plugins]]
repository = 'machakann/vim-sandwich'


[[plugins]]
repository = 'tpope/vim-dispatch'


[[plugins]]
repository = 'syngan/vim-clurin'

# [[plugins]]
# repository = 'nishigori/increment-activator'

[[plugins]]
repository = 'tpope/vim-speeddating'

[[plugins]]
repository = 'rhysd/clever-f.vim'

[[plugins]]
repository = 't9md/vim-smalls'

[[plugins]]
repository = 'sgur/vim-editorconfig'
# repository = 'editorconfig/editorconfig-vim'

[[plugins]]
repository = 'pekepeke/vim-trimr'

[[plugins]]
repository = 'mbbill/undotree'
# repository =  'sjl/gundo.vim'

[[plugins]]
repository = 'kana/vim-smartword'

[[plugins]]
repository = 'thinca/vim-qfreplace'

[[plugins]]
repository = 'thinca/vim-localrc'

[[plugins]]
repository = 'thinca/vim-ambicmd'

[[plugins]]
repository = 'nathanaelkane/vim-indent-guides'
# repository = 'Yggdroot/indentLine'


[[plugins]]
repository = 'vim-scripts/sudo.vim'

[[plugins]]
repository = 'koron/codic-vim'

[[plugins]]
repository = 'thinca/vim-quickrun'

[[plugins]]
repository = 'mattn/quickrunex-vim'

[[plugins]]
repository = 'osyo-manga/shabadou.vim'

[[plugins]]
repository = 'osyo-manga/vim-watchdogs'

[[plugins]]
repository = 'manicmaniac/vim-quickrun-qo'

[[plugins]]
repository = 'osyo-manga/vim-anzu'

[[plugins]]
repository = 'luochen1990/rainbow'
# repository = 'kien/rainbow_parentheses.vim'
# repository = 'oblitum/rainbow'

[[plugins]]
repository = 'vim-scripts/matchit.zip'

[[plugins]]
repository = 'gregsexton/MatchTag'

[[plugins]]
repository = 'tpope/vim-unimpaired'

# [[plugins]]
# repository = 'tyru/current-func-info.vim'

[[plugins]]
repository = 'tpope/vim-commentary'
# repository = 'tomtom/tcomment_vim'

[[plugins]]
repository = 'tpope/vim-projectionist'

[[plugins]]
repository = 'thinca/vim-template'

[[plugins]]
repository = 'mattn/sonictemplate-vim'

[[plugins]]
repository = 'ujihisa/shadow.vim'

[[plugins]]
repository = 'mhinz/vim-hugefile'

[[plugins]]
repository = 'tpope/vim-git'

[[plugins]]
repository = 'tpope/vim-fugitive'
# repository = 'lambdalisue/vim-gita'

[[plugins]]
repository = 'rhysd/committia.vim'

[[plugins]]
repository = 'idanarye/vim-merginal'

[[plugins]]
repository = 'AndrewRadev/gapply.vim'

[[plugins]]
repository = 'cohama/agit.vim'
# repository = 'gregsexton/gitv'

[[plugins]]
repository = 'rhysd/git-messenger.vim', {
\ 'gui': 1,
\ }
if !get(g:vimrc_enabled_features, "git_under1.8", 0)
  NeoBundle 'lambdalisue/vim-unified-diff'
endif
NeoBundleLazy 'vim-scripts/DirDiff.vim', {'autoload': {
\ 'commands' : [
\   'DirDiffOpen', 'DirDiffNext', 'DirDiffPrev',
\   'DirDiffUpdate', 'DirDiffQuit',
\   {'name': 'DirDiff', 'complete': 'dir'},
\ ],
\ }}

[[plugins]]
repository = 'vim-scripts/diffchar.vim'
NeoBundleLazy 'AndrewRadev/linediff.vim', {'autoload': {
\ 'commands': ['Linediff', 'LinediffReset'],
\ }}

[[plugins]]
repository = 'vim-scripts/ConflictDetection', {
\ 'depends': 'vim-scripts/ingo-library',
\ }
if has('python')
  NeoBundleLazy 'joonty/vdebug', {'autoload': {
  \ 'commands': [
  \ "VdebugStart", "Breakpoint",
  \ "BreakpointRemove", "BreakpointWindow",
  \ "VdebugEval", "VdebugOpt",
  \ ],
  \ }}
endif

" help {{{4

[[plugins]]
repository = 'thinca/vim-ref'
" , { 'autoload' : {
" \ 'commands' : {
" \   'name' : 'Ref',
" \   'complete' : 'customlist,ref#complete',
" \ },
" \ 'unite_sources' : [
" \   'ref/erlang', 'ref/man', 'ref/perldoc',
" \   'ref/phpmanual', 'ref/pydoc', 'ref/redis', 'ref/refe', 'ref/webdict'
" \ ],
" \ 'mappings' : ['n', 'K', '<Plug>(ref-']
" \ }}

[[plugins]]
repository = 'pekepeke/ref-javadoc', {
\ 'depends': 'thinca/vim-ref'
\ }
" , 'autoload': {
" \ 'unite_sources': [
" \   'ref/javadoc',
" \ ], }}

[[plugins]]
repository = 'soh335/vim-ref-jquery', {
\ 'depends': 'thinca/vim-ref'
\ }
" , 'autoload': {
" \ 'unite_sources': [
" \   'ref/jquery',
" \ ], }}

[[plugins]]
repository = 'taka84u9/vim-ref-ri', {
\ 'depends': 'thinca/vim-ref'}
" , 'autoload': {
" \ 'unite_sources': [
" \   'ref/ri',
" \ ], }}

[[plugins]]
repository = 'mfumi/ref-dicts-en'
" NeoBundle 'nishigori/vim-ref-phpunit'
" NeoBundle 'eiiches/vim-ref-gtkdoc'
" NeoBundle 'eiiches/vim-ref-info'
" NeoBundle 'mojako/ref-sources.vim'

" vim {{{4

[[plugins]]
repository = 'kana/vim-vspec'
NeoBundleLazy 'vim-jp/vital.vim', {'autoload': {
\ 'commands': [{
\ 'name': 'Vitalize', 'complete':'customlist,vitalizer#complete'
\ }]
\ }}

" vim-help {{{4

[[plugins]]
repository = 'mattn/learn-vimscript'

" completion {{{4
if get(g:vimrc_enabled_features, "eclim", 0)
  " do nothing
elseif s:exec_ruby
  NeoBundleLazy 'm2ym/rsense', {
  \ 'rtp' : 'etc',
  \ 'build' : {
  \    'mac': 'ruby etc/config.rb > ~/.rsense',
  \    'unix': 'ruby etc/config.rb > ~/.rsense',
  \ } }
endif
" if !s:bundle.is_installed('rsense')
"   NeoBundle "osyo-manga/vim-monster"
" endif
if get(g:vimrc_enabled_features, "ycm", 0) && has('python')
  NeoBundle 'Valloric/YouCompleteMe', {
    \ 'build': {
    \   'windows': "~/.vim/lib/ycm_build_win64.sh",
    \   'cygwin': './install.sh --clang-completer --system-libclang --system-boost --omnisharp-completer',
    \   'mac': './install.sh --clang-completer --omnisharp-completer',
    \   'unix': './install.sh --clang-completer --system-libclang --system-boost --omnisharp-completer',
    \ }}
elseif has('lua') && (v:version > 703 ||
      \ (v:version == 703 && has('patch885')))
  NeoBundle 'Shougo/neocomplete.vim'
  " , {'autoload':{
  " \ 'insert':1,
  " \ 'unite_sources': ['neocomplete'],
  " \ }}
  NeoBundle 'Shougo/neoinclude.vim'
  NeoBundle 'Shougo/neco-syntax'
  NeoBundle 'Shougo/neco-vim'
  if s:bundle.is_installed('rsense')
    NeoBundle 'supermomonga/neocomplete-rsense.vim'
  endif
else
  NeoBundle 'Shougo/neocomplcache.vim'
  " , {'autoload':{
  " \ 'insert':1,
  " \ }}
  if s:bundle.is_installed('rsense')
    NeoBundle 'Shougo/neocomplcache-rsense.vim'
  endif
endif

[[plugins]]
repository = 'Shougo/neosnippet.vim'
" , {
" \ 'lazy' : 1,
" \ 'autoload' : {
" \ 'commands' : ['NeoSnippetEdit', 'NeoSnippetSource'],
" \ 'insert' : 1,
" \ 'filetypes' : 'snippet',
" \ 'unite_sources' : ['snippet', 'neosnippet/user', 'neosnippet/runtime'],
" \ }}

[[plugins]]
repository = 'Shougo/neosnippet-snippets'

[[plugins]]
repository = 'hrsh7th/vim-neco-calc'

[[plugins]]
repository = 'rhysd/github-complete.vim'

" ruby {{{4

[[plugins]]
repository = 'vim-ruby/vim-ruby'
if s:exec_ruby
  if get(g:vimrc_enabled_features, "rails", 0)
    NeoBundle 'tpope/vim-rails'
    " , {'autoload':{
    " \ 'filetypes': ['ruby','haml','eruby'],
    " \ }}
    if s:bundle.is_installed('neocomplete.vim')
      NeoBundleLazy 'alpaca-tc/alpaca_rails_support', {
      \ 'depends' : ['Shougo/neocomplete.vim', 'tpope/vim-rails',
      \    'Shougo/vimproc.vim', 'Shougo/unite.vim'],
      \ 'autoload': {
      \   'unite_sources' : 'rails_support/locales',
      \   'commands' : [
      \     'RSCreateRoutesCache', 'RSCleanCache',
      \     'RSShowLocale', 'RSCreateLocaleCache',
      \   ]
      \ }}
    endif
  endif
  " NeoBundle 'taq/vim-rspec'
  NeoBundleLazy 'skwp/vim-rspec', {'autoload': {
  \ 'commands' : ['RunSpec', 'RSpecLine', 'RunSpecs', 'RunSpecLine']
  \ }}
  NeoBundle 'tpope/vim-bundler'
  " , {'autoload':{
  " \ 'filetypes': ['ruby'],
  " \ }}
  if get(g:vimrc_enabled_features, "sinatra", 0)
    NeoBundle 'hallison/vim-ruby-sinatra'
  endif
  NeoBundleLazy 'ecomba/vim-ruby-refactoring', {'autoload':{
  \ 'filetypes': ['ruby'],
  \ }}

  NeoBundle 'tpope/vim-cucumber'
  NeoBundle 'yaymukund/vim-rabl'
  NeoBundle 'vim-scripts/eruby.vim'

  " NeoBundle 'vim-vagrant'
  NeoBundleLazy 't9md/vim-chef', {'autoload':{
  \ 'filetypes': ['ruby'],
  \ }}

  NeoBundle 'rodjek/vim-puppet'
  NeoBundle 'joker1007/vim-ruby-heredoc-syntax', {'autoload':{
  \ 'filetypes': ['ruby'],
  \ }}

  NeoBundleLazy 'rhysd/unite-ruby-require.vim', { 'autoload' : {
  \ 'unite_sources' : ['ruby/require'],
  \ }}
  NeoBundle 'rhysd/neco-ruby-keyword-args'

  NeoBundleLazy 'ujihisa/unite-gem', { 'autoload' : {
  \ 'unite_sources' : ['gem'],
  \ }}
  NeoBundleLazy 'ujihisa/unite-rake', { 'autoload' : {
  \ 'unite_sources' : ['rake'],
  \ }}
  if get(g:vimrc_enabled_features, "rails", 0)
    NeoBundleLazy 'basyura/unite-rails', { 'autoload' : {
    \ 'unite_sources' : [
    \   'rails/bundle', 'rails/bundled_gem', 'rails/config',
    \   'rails/controller', 'rails/db', 'rails/destroy', 'rails/features',
    \   'rails/gem', 'rails/gemfile', 'rails/generate', 'rails/git',
    \   'rails/helper', 'rails/heroku', 'rails/initializer',
    \   'rails/javascript', 'rails/lib', 'rails/log', 'rails/mailer',
    \   'rails/model', 'rails/rake', 'rails/route', 'rails/schema',
    \   'rails/spec', 'rails/stylesheet', 'rails/view'
    \ ],
    \ }}
  endif
  NeoBundleLazy 'moro/unite-stepdefs', { 'autoload' : {
  \ 'unite_sources': ['stepdefs'],
  \ }}
  if has("signs") && has("clientserver") && v:version > 700
    NeoBundleLazy 'astashov/vim-ruby-debugger', {'autoload':{
    \ 'commands': ['Rdebugger']
    \ }}
  else
    NeoBundleLazy 'astashov/vim-ruby-debugger'
  endif
endif

" html {{{4

[[plugins]]
repository = 'othree/html5.vim'

[[plugins]]
repository = 'amirh/HTML-AutoCloseTag'
NeoBundleLazy 'mattn/emmet-vim', {'autoload':{
\ 'filetypes': ['html','xhtml','eruby','php','css','scss'],
\ }}
if s:exec_go
  NeoBundleLazy 'mattn/livestyle-vim', {'autoload':{
  \ 'commands': ['LiveStyle'],
  \ },
  \ 'build' : {
  \ 'windows': 'go get golang.org/x/net/websocket && go build -o livestyled/livestyled livestyled/livestyled.go',
  \ 'cygwin' : 'go get golang.org/x/net/websocket && go build -o livestyled/livestyled livestyled/livestyled.go',
  \ 'mac'    : 'go get golang.org/x/net/websocket && go build -o livestyled/livestyled livestyled/livestyled.go',
  \ 'unix'   : 'go get golang.org/x/net/websocket && go build -o livestyled/livestyled livestyled/livestyled.go',
  \ }}
endif
NeoBundleLazy 'https://gist.github.com/6576341', {
\ 'directory' : 'endtagcomment',
\ 'script_type' : 'plugin',
\ 'autoload': {'mappings': [['n', '<Plug>(endtagcomment)']]}
\ }
"  templates

[[plugins]]
repository = 'tpope/vim-haml'

[[plugins]]
repository = 'digitaltoad/vim-jade'

[[plugins]]
repository = 'mustache/vim-mustache-handlebars'

" css {{{4
if has('python') || has('python3')
  NeoBundle 'Rykka/colorv.vim'
  " , {'autoload':{
  " \ 'filetypes': ['html','javascript','css','sass','scss','less','slim','stylus'],
  " \ }}
endif
" NeoBundle 'gorodinskiy/vim-coloresque'


[[plugins]]
repository = 'hail2u/vim-css3-syntax'

[[plugins]]
repository = 'npacker/vim-css3complete'
if executable('less')
  NeoBundle 'groenewege/vim-less'
endif
if executable('stylus')
  NeoBundle 'wavded/vim-stylus'
endif

[[plugins]]
repository = 'slim-template/vim-slim'

" javascript {{{4

[[plugins]]
repository = 'isRuslan/vim-es6'

[[plugins]]
repository = 'guileen/simple-javascript-indenter'
" NeoBundle 'othree/yajs.vim'

[[plugins]]
repository = 'pangloss/vim-javascript'

[[plugins]]
repository = 'mxw/vim-jsx'
" NeoBundle 'jsx/vim-jsx'
" NeoBundle 'moll/vim-node'

[[plugins]]
repository = 'pekepeke/vim-node'
" , {'autoload': {
"   \ 'filetypes': ['javascript', 'coffee'],
"   \ 'depends': ['gf-user'],
"   \ }}
if s:exec_npm && has('python') || has('python3')
  NeoBundle 'marijnh/tern_for_vim', {
  \ 'build' : {
  \   'cygwin': 'npm install',
  \   'windows': 'npm install',
  \   'mac': 'npm install',
  \   'unix': 'npm install',
  \ }}
endif

[[plugins]]
repository = 'othree/javascript-libraries-syntax.vim'

[[plugins]]
repository = 'claco/jasmine.vim'

[[plugins]]
repository = 'elzr/vim-json'
NeoBundleLazy 'Quramy/vison', {'autoload':{
\ 'commands': [
\ 'VisonSetup',
\ {'name': 'Vison', 'complete': 'vison#switch_type_complete'},
\ 'VisonRemoveSchema',
\ 'VisonRegisterSchema',
\ ] }}

NeoBundleLazy 'chikatoike/sourcemap.vim', {'autoload':{
\ 'commands': [
\   {'name' : 'SourceMapAddMap', 'complete':'file'},
\   'SourceMapSwitch', 'SourceMapConvertQuickfixToOriginal',
\   'SourceMapConvertLocListToOriginal', 'SourceMapAddOriginalToQuickfix',
\   'SourceMapAddOriginalToLocList',]
\ }}

[[plugins]]
repository = 'briancollins/vim-jst'

if get(g:vimrc_enabled_features, "dart", 0)
  NeoBundle 'vim-scripts/Dart'
endif
if get(g:vimrc_enabled_features, "haxe", 0)
  NeoBundleLazy 'jdonaldson/vaxe', {'autoload':{
  \ 'filetypes': ['haxe','hxml','nmml'],
  \ }}
endif

[[plugins]]
repository = 'kchmck/vim-coffee-script'

[[plugins]]
repository = 'leafgarland/typescript-vim'
if s:exec_npm
  NeoBundleLazy 'clausreinke/typescript-tools', {
  \ 'autoload' : { 'filetypes' : 'typescript' },
  \ 'build' : {
  \     'cygwin' : 'npm install',
  \     'windows' : 'npm install',
  \     'mac'    : 'npm install',
  \     'unix'   : 'npm install',
  \   },
  \ }
endif
" NeoBundleLazy 'Quramy/tsuquyomi', {{'autoload': {
" \ 'filetypes': 'typescript',
" \ }}}

" python {{{4
" http://rope.sourceforge.net/

[[plugins]]
repository = 'klen/python-mode'

[[plugins]]
repository = 'lambdalisue/vim-python-virtualenv'
if get(g:vimrc_enabled_features, "django", 0)
  NeoBundle 'gerardo/vim-django-support'
endif

[[plugins]]
repository = 'voithos/vim-python-matchit'

[[plugins]]
repository = 'heavenshell/vim-pydocstring'
NeoBundleLazy 'hachibeeDI/unite-pythonimport', {'autoload':{
\ 'unite_sources' : ['pythonimport'],
\ }}

[[plugins]]
repository = 'Glench/Vim-Jinja2-Syntax'

if !s:bundle.is_installed('YouCompleteMe')
  if (has('python') || has('python3'))
    NeoBundleLazy 'davidhalter/jedi-vim', {
    \   'autoload' : { 'filetypes' : ['python', 'python3'], },
    \ }
  else
    NeoBundleLazy 'davidhalter/jedi-vim'
  endif
endif

" perl {{{4

[[plugins]]
repository = 'vim-perl/vim-perl'

[[plugins]]
repository = 'moznion/vim-cpanfile'
if executable('perl')
  NeoBundle 'c9s/perlomni.vim'
  NeoBundle 'motemen/xslate-vim'
endif
NeoBundleLazy 'y-uuki/unite-perl-module.vim', { 'autoload' : {
\ 'unite_sources' : ['perl/global', 'perl/local'],
\ }}
NeoBundleLazy 'y-uuki/perl-local-lib-path.vim', {'autoload':{
\ 'filetypes': ['perl'],
\ }}
NeoBundleLazy 'soh335/unite-perl-module', {'autoload' : {
\ 'unite_sources' : ['perl-module/carton', 'perl-module/cpan'],
\ }}

" C,CPP {{{4
NeoBundleLazy 'vim-scripts/DoxygenToolkit.vim', {'autoload':{
\ 'filetypes': ['c', 'cpp'],
\ }}
" NeoBundleLazy 'osyo-manga/vim-snowdrop', {'autoload':{
" \ 'filetypes': ['c', 'cpp', 'objc', 'objcpp'],
" \ }}
if !s:bundle.is_installed('YouCompleteMe')
  NeoBundleLazy 'Rip-Rip/clang_complete', {'autoload':{
  \ 'filetypes': ['c', 'cpp', 'objc', 'objcpp'],
  \ }}
  if s:is_mac
    NeoBundleLazy 'tokorom/clang_complete-getopts-ios', {'autoload': {
    \ 'filetypes': ['objc', 'objcpp'],
    \ }}
  endif
endif

[[plugins]]
repository = 'peterhoeg/vim-qml'

" C# {{{4
" NeoBundleLazy 'OrangeT/vim-csharp', {'autoload':{
" \ 'filetypes': ['cs'],
" \ }}

if !s:bundle.is_installed('YouCompleteMe')
  if s:exec_xbuild
    NeoBundleLazy 'OmniSharp/omnisharp-vim', {
    \ 'autoload': {'filetypes': ['cs']},
    \ 'build': {
    \   'windows': 'MSBuild.exe server/OmniSharp.sln /p:Platform="Any CPU"',
    \   'mac': 'xbuild server/OmniSharp.sln',
    \   'unix': 'xbuild server/OmniSharp.sln',
    \ }}
  endif
endif

" OSX {{{4
if s:is_mac
  NeoBundle 'b4winckler/vim-objc'
  NeoBundle 'pekepeke/cocoa.vim'
  if has('ruby')
    NeoBundleLazy 'eraserhd/vim-ios', {'autoload':{
    \ 'filetypes': ['objc'],
    \ }}
  endif
  NeoBundle 'vim-scripts/applescript.vim'
endif

" windows {{{4

[[plugins]]
repository = 'PProvost/vim-ps1'
if s:is_win
  NeoBundle 'cd01/poshcomplete-vim'
endif
if get(g:vimrc_enabled_features, "vbnet", 0)
  NeoBundleLazy 'hachibeeDI/vim-vbnet', {'autoload':{
  \ 'filetypes': ['vbnet'],
  \ }}
endif

" java, android {{{4
NeoBundleLazy 'mikelue/vim-maven-plugin', {'autoload':{
\ 'filetypes': ['java'],
\ }}
if get(g:vimrc_enabled_features, "eclim", 0)
  NeoBundleLazy 'ervandew/eclim', {
  \ 'build' : {
  \   'windows': 'ant -Declipse.home='.escape($ECLIPSE_HOME, '')
  \              .' -Dvim.files='.escape(expand('~/.vim/eclim_bundle/eclim'), ''),
  \   'mac': 'ant -Declipse.home='.$ECLIPSE_HOME
  \          . '-Dvim.files='.escape(expand('~/.vim/eclim_bundle/eclim'), ''),
  \   'linux': 'ant -Declipse.home='.$ECLIPSE_HOME
  \          . '-Dvim.files='.escape(expand('~/.vim/eclim_bundle/eclim'), ''),
  \ }}
elseif s:exec_java
  NeoBundleLazy 'kamichidu/unite-javaimport', {'autoload': {
  \ 'unite_sources': ['javaimport']
  \ }}
  NeoBundle 'kamichidu/vim-javaclasspath', {
  \   'depends': ['kamichidu/vim-javalang'],
  \}
  NeoBundle 'artur-shaik/vim-javacomplete2'
  " , {
  " \   'autoload' : { 'filetypes' : 'java' },
  " \ }
endif
NeoBundleLazy 'vim-scripts/jcommenter.vim', {'autoload':{
\ 'filetypes': ['java'],
\ }}

[[plugins]]
repository = 'vim-scripts/groovyindent'

[[plugins]]
repository = 'vim-scripts/groovy.vim'
NeoBundleLazy 'thinca/vim-logcat', {'autoload':{
\ 'commands': ['Logcat', 'LogcatClear'],
\ }}

[[plugins]]
repository = 'lepture/vim-velocity'
NeoBundleLazy 'ryotakato/unite-gradle', {'autoload':{
\ 'unite_sources': ['gradle'],
\ }}

" scala {{{4
NeoBundleLazy 'derekwyatt/vim-scala', {'autoload':{
\ 'filetypes': ['scala'],
\ }}

" go {{{4
NeoBundleLazy 'fatih/vim-go', {'autoload':{
\ 'filetypes': ['go'],
\ }}
if s:exec_go
  NeoBundle 'undx/vim-gocode'
else
  NeoBundleLazy 'undx/vim-gocode'
endif

" texts {{{4

[[plugins]]
repository = 'tpope/vim-markdown'

[[plugins]]
repository = 'nelstrom/vim-markdown-folding'

[[plugins]]
repository = 'kannokanno/previm'
" NeoBundle 'beckorz/previm'

[[plugins]]
repository = 'timcharper/textile.vim'

[[plugins]]
repository = 'aklt/plantuml-syntax'
" NeoBundle 'maxmeyer/vim-taskjuggler'

[[plugins]]
repository = 'hara/vim-opf'

NeoBundleLazy 'moznion/hateblo.vim', {'autoload': {
\ 'commands': [
\   'HatebloCreate', 'HatebloCreateDraft', 'HatebloList',
\   'HatebloUpdate', 'HatebloDelete',
\ ], 'unite_sources': ['hateblo-list']}}

[[plugins]]
repository = 'moro/vim-review'

[[plugins]]
repository = 'nvie/vim-rst-tables'

[[plugins]]
repository = 'vim-scripts/sequence'

" haskell {{{4
if get(g:vimrc_enabled_features, "haskell", 0)
  NeoBundle 'itchyny/vim-haskell-indent'
  NeoBundleLazy 'dag/vim2hs', {'autoload':{
  \ 'filetypes': ['haskell'],
  \ }}
  NeoBundleLazy 'ujihisa/ref-hoogle', {'autoload':{
  \ 'filetypes': ['haskell'],
  \ }}
  NeoBundle 'ujihisa/neco-ghc'
  NeoBundleLazy "ujihisa/unite-haskellimport", {'autoload':{
  \ 'filetypes': ['haskell'],
  \ }}
  NeoBundle 'eagletmt/ghcmod-vim'
  NeoBundleLazy 'eagletmt/unite-haddock', {'autoload':{
  \ 'filetypes': ['haskell'],
  \ }}
  NeoBundle 'elixir-lang/vim-elixir'
endif

" php {{{4
if get(g:vimrc_enabled_features, 'phphtml', 0)
  NeoBundle 'captbaritone/better-indent-support-for-php-with-html'
endif

[[plugins]]
repository = '2072/PHP-Indenting-for-VIm'
" NeoBundle 'Gasol/vim-php'

[[plugins]]
repository = 'StanAngeloff/php.vim'
" NeoBundle 'arnaud-lb/vim-php-namespace'
" NeoBundle 'pekepeke/phpfoding.vim'

[[plugins]]
repository = 'adoy/vim-php-refactoring-toolbox'
" NeoBundle 'beberlei/vim-php-refactor'
if get(g:vimrc_enabled_features, 'cakephp', 0)
  NeoBundleLazy 'violetyk/cake.vim', {'autoload':{
  \ 'filetypes': ['php'],
  \ }}
endif
if get(g:vimrc_enabled_features, 'laravel', 0)
  NeoBundle 'jwalton512/vim-blade'
endif

if !get(g:vimrc_enabled_features, "eclim", 0)
  if s:exec_php && get(g:vimrc_enabled_features, 'padawan', 0)
    NeoBundle 'mkusher/padawan.vim', {
    \ 'cygwin': 'bash install.sh',
    \ 'windows': 'bash install.sh',
    \ 'mac': 'bash install.sh',
    \ 'unix': 'bash install.sh',
    \ }
  elseif get(g:vimrc_enabled_features, 'phpcomplete-extended', 0)
    " NeoBundle 'm2mdas/phpcomplete-extended'
    NeoBundle 'pekepeke/phpcomplete-extended'
    if get(g:vimrc_enabled_features, 'laravel', 0)
      NeoBundle 'm2mdas/phpcomplete-extended-laravel'
    endif
    if get(g:vimrc_enabled_features, 'symfony', 0)
      NeoBundle 'm2mdas/phpcomplete-extended-symfony'
    endif
  else
    NeoBundle 'shawncplus/phpcomplete.vim'
  endif
endif

" sql {{{4

[[plugins]]
repository = 'mattn/vdbi-vim'
NeoBundleLazy 'vim-scripts/dbext.vim', {'autoload':{
\ 'commands': [
\ { 'name': 'DBExecSQL'}, { 'name': 'DBExecSQLTopX'},
\ { 'name': 'DBConnect'}, { 'name': 'DBDisconnect'},
\ { 'name': 'DBDisconnectAll'}, { 'name': 'DBCommit'},
\ { 'name': 'DBRollback'}, { 'name': 'DBListConnections'},
\ { 'name': 'DBExecRangeSQL'}, { 'name': 'Call'}, { 'name': 'Create' },
\ { 'name': 'Select', 'complete': 'customlist,dbext#DB_completeTables' },
\ { 'name': 'Alter', 'complete': 'customlist,dbext#DB_completeTables' },
\ { 'name': 'Update', 'complete': 'customlist,dbext#DB_completeTables' },
\ { 'name': 'Insert', 'complete': 'customlist,dbext#DB_completeTables' },
\ { 'name': 'Delete', 'complete': 'customlist,dbext#DB_completeTables' },
\ { 'name': 'Drop', 'complete': 'customlist,dbext#DB_completeTables' },
\ { 'name': 'DBSetOption', 'complete': 'customlist,dbext#DB_completeSettings' },
\ { 'name': 'DBGetOption', 'complete': 'customlist,dbext#DB_completeSettings' },
\ { 'name': 'DBVarRangeAssign' }, { 'name': 'DBListVar'},
\ { 'name': 'DBSetVar', 'complete': 'customlist,dbext#DB_completeVariable'},
\ ] }}

" etc {{{4

[[plugins]]
repository = 'honza/dockerfile.vim'

[[plugins]]
repository = 'chase/vim-ansible-yaml'

[[plugins]]
repository = 'MicahElliott/Rocannon'

[[plugins]]
repository = 'cespare/vim-toml'
NeoBundleLazy 'xolox/vim-lua-ftplugin', {'autoload':{
\ 'filetypes': ['lua'],
\ },
\ 'depends': ['xolox/vim-misc'],
\ }

[[plugins]]
repository = 'vim-scripts/httplog'

[[plugins]]
repository = 'vim-scripts/syslog-syntax-file'

[[plugins]]
repository = 'uarun/vim-protobuf'

[[plugins]]
repository = 'sophacles/vim-processing'
NeoBundleLazy 'pekepeke/ref-processing-vim', {'autoload':{
\ 'filetypes': ['processing'],
\ }}

[[plugins]]
repository = 'sjl/strftimedammit.vim'

[[plugins]]
repository = 'tangledhelix/vim-octopress'

[[plugins]]
repository = 'jcfaria/Vim-R-plugin'
NeoBundleLazy 'rbtnn/vimconsole.vim', {
\ 'autoload' : {
\   'commands': [
\     'VimConsoleLog', 'VimConsoleOpen', 'VimConsoleWarn', 'VimConsoleError',
\     'VimConsoleError', 'VimConsoleToggle', 'VimConsoleClear', 'VimConsoleRedraw',
\   ] }
\ }
NeoBundleLazy 'basyura/rmine.vim', {'autoload': {
\ 'commands': [
\   {'name': 'Rmine', 'complete': 'custom,rmine#complete#project'},
\   'RmineIssue', 'RmineNewIssue'
\ ],
\ 'unite_sources': ['rmine/project', 'rmine/query', 'rmine/selector'],
\ }}

" config {{{4

[[plugins]]
repository = 'qqshfox/vim-tmux'

[[plugins]]
repository = 'vim-scripts/nginx.vim'

[[plugins]]
repository = 'smerrill/vcl-vim-plugin'

[[plugins]]
repository = 'ksauzz/haproxy.vim'
" NeoBundle 'empanda/vim-varnish.vim'

[[plugins]]
repository = 'glidenote/keepalived-syntax.vim'
" NeoBundle 'Shougo/vim-nyaos'

" unite.vim {{{3

[[plugins]]
repository = 'Shougo/unite.vim'
" , {
" \   'autoload': { 'commands' : ['Unite', 'UniteBookmarkAdd'] },
" \ }

[[plugins]]
repository = 'Shougo/neomru.vim'
" , {'autoload': {
" \ 'unite_sources': ['file_mru', 'directory_mru',
" \   'neomru/file', 'neomru/directory']
" \}}

[[plugins]]
repository = 'Shougo/neoyank.vim'
NeoBundleLazy 'thinca/vim-unite-history', {'autoload':{
\ 'unite_sources': ['history/command', 'history/search'],
\ }}
NeoBundleLazy 'Shougo/unite-help', { 'autoload' : {
\ 'unite_sources' : ['help'],
\ }}
NeoBundleLazy 'tacroe/unite-mark', { 'autoload' : {
\ 'unite_sources' : ['mark'],
\ }}
NeoBundleLazy 'zhaocai/unite-scriptnames', { 'autoload' : {
\ 'unite_sources' : ['scriptnames'],
\ }}
NeoBundleLazy 'pasela/unite-webcolorname', { 'autoload' : {
\ 'unite_sources' : ['webcolorname'],
\ }}
NeoBundleLazy 'ujihisa/unite-colorscheme', { 'autoload' : {
\ 'unite_sources' : ['colorscheme'],
\ }}
NeoBundleLazy 'LeafCage/unite-gvimrgb', {'autoload': {
\ 'unite_sources': ['gvimrgb'],
\ }}
NeoBundleLazy 'Shougo/unite-build', { 'autoload' : {
\ 'unite_sources' : ['build'],
\ }}
NeoBundleLazy 'Shougo/unite-outline', { 'autoload' : {
\ 'unite_sources' : ['outline'],
\ }}
NeoBundleLazy 'sgur/unite-git_grep', { 'autoload' : {
\ 'unite_sources' : ['vcs_grep', 'vcs_grep/git', 'vcs_grep/hg'],
\ }}
NeoBundleLazy 'osyo-manga/unite-highlight', {'autoload':{
\ 'unite_sources': ['highlight'],
\ }}
NeoBundleLazy 'osyo-manga/unite-candidate_sorter', {'autoload': {
\ 'mappings': [['n', '<Plug>(unite-candidate_sort)']]
\ }}
NeoBundleLazy 'osyo-manga/unite-quickfix', { 'autoload' : {
\ 'unite_sources' : ['quickfix', 'location_list'],
\ }}
NeoBundleLazy "osyo-manga/unite-quickrun_config", { 'autoload' : {
\ 'unite_sources' : ['quickrun_config'],
\ }}

[[plugins]]
repository = 'eiiches/unite-tselect'
" , { 'autoload' : {
" \ 'unite_sources' : ['tselect'],
" \ }}
NeoBundleLazy 'tsukkee/unite-tag', { 'autoload' : {
\ 'unite_sources' : ['tag', 'tag/file', 'tag/include'],
\ }}
" NeoBundleLazy 'hewes/unite-gtags', {'autoload': {
" \ 'unite_sources': [
" \ 'gtags/context' , 'gtags/ref' , 'gtags/def' , 'gtags/grep' , 'gtags/completion',
" \ ],
" \ }}
NeoBundleLazy 'haya14busa/unite-ghq', {'autoload' : {
\ 'unite_sources' : ['ghq'],
\ }}
if executable('watson')
  NeoBundleLazy 'alpaca-tc/vim-unite-watson.vim', {
  \ 'commands' : 'Watson',
  \ 'depends' : 'Shougo/unite.vim',
  \ 'autoload' : {
  \ 'unite_sources' : ['watson', 'watson/dirty', 'watson/clean', 'watson/current_file'],
  \ }}
endif
NeoBundleLazy 'pekepeke/quicklearn', { 'autoload' : {
\ 'unite_sources' : ['quicklearn'],
\ }}
NeoBundleLazy "osyo-manga/unite-fold", {'autoload':{
\ 'unite_sources' : ['fold'],
\ }}
NeoBundleLazy "monochromegane/unite-yaml", {'autoload':{
\ 'unite_sources': ['yaml', 'yaml-list'],
\ }}
" NeoBundle 'RomainEndelin/fusion.vim', { 'autoload' : {
" \ 'unite_sources' : ['projection-files', 'projection-categories'],
" \ }}

if executable('w3m')
  NeoBundleLazy 'yuratomo/w3m.vim', {'autoload':{
  \ 'commands':[
  \ {'name': 'W3m', 'complete':'customlist,w3m#search_engine#List'},
  \ {'name': 'W3mTab', 'complete':'customlist,w3m#search_engine#List'},
  \ {'name': 'W3mSplit', 'complete':'customlist,w3m#search_engine#List'},
  \ {'name': 'W3mVSplit', 'complete':'customlist,w3m#search_engine#List'},
  \ {'name': 'W3mLocal', 'complete':'customlist,w3m#search_engine#List'},
  \ 'W3mHistory', 'W3mHistoryClear',
  \ ]}}
endif

NeoBundleLazy 'pekepeke/vim-unite-repo-files', { 'autoload' : {
\ 'unite_sources' : ['repo_files'],
\ }}
NeoBundleLazy 'pekepeke/vim-unite-z', { 'autoload' : {
\ 'unite_sources' : ['z'],
\ }}

if s:is_win
  NeoBundleLazy 'sgur/unite-everything', { 'autoload' : {
  \ 'unite_sources' : ['everything', 'everything/async'],
  \ }}
else
  if s:is_mac
    NeoBundleLazy 'choplin/unite-spotlight', { 'autoload' : {
    \ 'unite_sources' : ['spotlight'],
    \ }}
  else
    NeoBundleLazy 'ujihisa/unite-locate', { 'autoload' : {
    \ 'unite_sources' : ['locate'],
    \ }}
  endif
  NeoBundle 'ujihisa/neco-look'
endif

" www {{{3
NeoBundleLazy 'tyru/open-browser.vim', {'autoload':{
\ 'functions': ['OpenBrowser', ],
\ 'function_prefix':'openbrowser',
\ 'commands': [
\ {'name': 'OpenBrowser',},
\ {'name': 'OpenBrowserSearch', 'complete':'customlist,openbrowser#_cmd_complete'},
\ {'name': 'OpenBrowserSmartSearch', 'complete':'customlist,openbrowser#_cmd_complete'},
\ ],
\ 'mappings': [
\   ['nv', '<Plug>(openbrowser-',]
\ ],
\ }}
NeoBundleLazy 'tyru/open-browser-github.vim', {'autoload': {
\ 'commands': ['OpenGithubFile', 'OpenGithubIssue',
\   'OpenGithubPullReq'],
\ }}
NeoBundleLazy 'junegunn/vim-github-dashboard', {'autoload': {
\ 'commands': [
\   'GHD', 'GHA', 'GHDashboard', 'GHActivity', ],
\ }}

[[plugins]]
repository = 'mattn/webapi-vim'
NeoBundleLazy 'mattn/excitetranslate-vim', {'autoload': {
\ 'commands': ['ExciteTranslate'],
\ }}
NeoBundleLazy 'mattn/gist-vim', {'autoload': {
\ 'commands': ['Gist'],
\ }}

" gf-user {{{3

[[plugins]]
repository = 'kana/vim-gf-user'

[[plugins]]
repository = 'kana/vim-gf-diff'
NeoBundleLazy 'sgur/vim-gf-autoload', {'autoload':{
\ 'filetypes': ['vim'],
\ }}
NeoBundleLazy 'zhaocai/vim-gf-python', {'autoload':{
\ 'filetypes': ['python'],
\ }}
if s:exec_ruby
  NeoBundleLazy 'pekepeke/vim-gf-ruby-require', {'autoload':{
  \ 'filetypes': ['ruby'],
  \ }}
endif
NeoBundleLazy 'pekepeke/vim-gf-vundle', {'autoload':{
\ 'filetypes': ['vim'],
\ }}

" operator {{{3

[[plugins]]
repository = 'kana/vim-operator-user'

[[plugins]]
repository = 'kana/vim-operator-replace', {
\ 'depends' : 'kana/vim-operator-user',}
" 'autoload' : {
" \ 'mappings' : [
" \ ['nx', '<Plug>(operator-replace)']]
" \ }}
NeoBundleLazy 'tyru/operator-camelize.vim', {
\ 'depends' : 'kana/vim-operator-user', 'autoload' : {
\ 'mappings' : [
\ ['nx', '<Plug>(operator-camelize', '<Plug>(operator-decamelize)']]
\ }}
NeoBundleLazy 'tyru/operator-html-escape.vim', {
\ 'depends' : 'kana/vim-operator-user', 'autoload' : {
\ 'mappings' : [
\ ['nx', '<Plug>(operator-html-']]
\ }}
NeoBundleLazy 'syngan/vim-operator-furround', {'autoload':{
\ 'mappings': ['<Plug>(operator-furround-']
\ }}
NeoBundleLazy 'rhysd/vim-operator-surround', {'autoload': {
\ 'mappings': [['nx', '<Plug>(operator-surround-']]
\ }}
NeoBundleLazy 'sgur/vim-operator-openbrowser', {'autoload': {
\ 'mappings' : [
\ ['nx', '<Plug>(operator-openbrowser)']]
\ }}
NeoBundleLazy 'pekepeke/vim-operator-shuffle', {
\ 'depends' : 'kana/vim-operator-user', 'autoload' : {
\ 'mappings' : [
\ ['nx', '<Plug>(operator-shuffle)']]
\ }}
NeoBundleLazy 'pekepeke/vim-operator-tabular', {
\ 'depends': 'pekepeke/vim-csvutil',
\ 'autoload' : {
\ 'mappings' : [
\ ['nx', '<Plug>(operator-tabular-', ]]
\ }}
NeoBundleLazy 'pekepeke/vim-operator-normalize-utf8mac', {
\ 'depends' : 'kana/vim-operator-user',
\ 'autoload' : {
\ 'mappings' : [['nx', '<Plug>(operator-normalize_utf8mac)']]
\ }}

" textobj {{{3

[[plugins]]
repository = 'kana/vim-textobj-user'
" NeoBundleLazy 'kana/vim-textobj-datetime', {'autoload': {
" \ 'mappings': [['vo',
" \ 'ada', 'adf', 'add', 'adt', 'adz',
" \ 'ida', 'idf', 'idd', 'idt', 'idz',
" \ ]],
" \ }}
NeoBundleLazy 'kana/vim-textobj-diff', {'autoload': {
\ 'mappings': [
\ ['n', '<Leader>dj', '<Leader>dJ', '<Leader>dk', '<Leader>dK',
\   '<Leader>dfj', '<Leader>dfJ', '<Leader>dfk', '<Leader>dfK', ]
\ ],
\ }}
NeoBundleLazy 'kana/vim-textobj-entire', {'autoload':{
\ 'mappings': [['vo', '<Plug>(textobj-entire-', ]],
\ }}
" \ 'mappings': [['vo', 'ie', 'ae']],
NeoBundleLazy 'kana/vim-textobj-fold', {'autoload':{
\ 'mappings': [['nvx', '<Plug>(textobj-fold-i)', '<Plug>(textobj-fold-a)']],
\ }}
NeoBundleLazy 'kana/vim-textobj-lastpat', {'autoload': {
\ 'mappings' : [['vo', 'a/', 'i/', 'a?', 'i?' ]],
\ }}
" \ '<Plug>(textobj-lastpat-n)', '<Plug>(textobj-lastpat-N)',
NeoBundleLazy 'kana/vim-textobj-syntax', {'autoload': {
\ 'mappings' : [['nvx',
\ '<Plug>(textobj-syntax-i)', '<Plug>(textobj-syntax-a)',
\ ]],
\ }}
NeoBundleLazy 'kana/vim-textobj-line', {'autoload':{
\ 'mappings': [['vo', 'al', 'il', '<Plug>(textobj-line-',]],
\ }}
NeoBundleLazy 'kana/vim-textobj-underscore', {'autoload':{
\ 'mappings': [['nvx', '<Plug>(textobj-quoted-', ]],
\ }}
NeoBundleLazy 'thinca/vim-textobj-between', {
\ 'depends' : 'vim-textobj-user',
\ 'autoload' : {
\ 'mappings' : [
\ ['nvx', '<Plug>(textobj-between-',]]
\ }}
" NeoBundle 'thinca/vim-textobj-comment'
NeoBundleLazy 'kana/vim-textobj-function', {
\ 'depends' : 'vim-textobj-user',
\ 'autoload' : {
\ 'mappings' : [
\ ['nvx', '<Plug>(textobj-function-',]]
\ }}

[[plugins]]
repository = 'thinca/vim-textobj-function-javascript'

[[plugins]]
repository = 'thinca/vim-textobj-function-perl'

[[plugins]]
repository = 't9md/vim-textobj-function-ruby'
NeoBundleLazy 'nelstrom/vim-textobj-rubyblock', {'autoload':{
\ 'filetypes': ['ruby'],
\ }}
NeoBundleLazy 'deris/vim-textobj-enclosedsyntax', {'autoload':{
\ 'mappings' : [['nvo',
\ '<Plug>(textobj-enclosedsyntax-',
\ ]]}}

[[plugins]]
repository = "osyo-manga/vim-textobj-multitextobj", {
\ 'depends' : 'vim-textobj-user', }
" \ 'autoload' : {
" \ 'mappings' : [
" \ ['nvo', '<Plug>(textobj-multitextobj-i)', '<Plug>(textobj-multitextobj-a)']]
" \ }}

[[plugins]]
repository = 'osyo-manga/vim-textobj-multiblock', {
\ 'depends' : 'vim-textobj-user', }
" \ 'autoload' : {
" \ 'mappings' : [
" \ ['nvo', '<Plug>(textobj-multiblock-i)', '<Plug>(textobj-multiblock-a)']]
" \ }}

[[plugins]]
repository = 'vim-scripts/textobj-indent', {
\ 'depends' : 'vim-textobj-user', }
" \ 'autoload' : {
" \ 'mappings' : [
" \ ['nvo', '<Plug>(textobj-indent-i)', '<Plug>(textobj-indent-a)']]
" \ }}

[[plugins]]
repository = 'sgur/vim-textobj-parameter', {
\ 'depends' : 'vim-textobj-user', }
" \ 'autoload' : {
" \ 'mappings' : [
" \ ['nvo', '<Plug>(textobj-parameter-i)', '<Plug>(textobj-parameter-a)']]
" \ }}
" NeoBundleLazy 'h1mesuke/textobj-wiw', {
" \ 'depends' : 'vim-textobj-user',
" \ 'autoload' : {
" \ 'mappings' : [
" \ ['nvo', '<Plug>(textobj-wiw-i)', '<Plug>(textobj-wiw-a)']]
" \ }}
NeoBundleLazy 'rhysd/vim-textobj-word-column', {'autoload':{
\ 'mappings': [['xo', '<Plug>(textobj-wordcolumn']]
\ }}
NeoBundleLazy 'rhysd/vim-textobj-continuous-line', {'autoload':{
\ 'filetypes': ['vim', 'c', 'cpp', 'sh', 'zsh', 'fish'],
\ }}
NeoBundleLazy 'osyo-manga/vim-textobj-context', {'autoload':{
\ 'mappings' : [['nvo',
\ '<Plug>(textobj-context-i)',
\ ]]}}

[[plugins]]
repository = "osyo-manga/vim-textobj-blockwise"

[[plugins]]
repository = 'akiyan/vim-textobj-xml-attribute'
" , {'autoload':{
" \ 'mappings' : [['nvo',
" \ '<Plug>(textobj-xmlattribute-', 'axa', 'ixa'
" \ ]]}}
NeoBundleLazy 'rhysd/vim-textobj-lastinserted', {'autoload':{
\ 'mappings' : [
\ ['nvo', '<Plug>(textobj-lastinserted-']]
\ }}
NeoBundleLazy 'gilligan/textobj-lastpaste', {'autoload':{
\ 'mappings': [
\ ['nvo', '<Plug>(textobj-lastpaste-', 'aip', 'iip']]
\ }}

[[plugins]]
repository = 'mattn/vim-textobj-url'
" , {'autoload':{
" \ 'mappings' : [
" \ ['nvo', '<Plug>(textobj-url-']]
" \ }}
NeoBundleLazy 'anyakichi/vim-textobj-ifdef', {'autoload':{
\ 'mappings' : [
\ ['nvo', '<Plug>(textobj-ifdef-i)', '<Plug>(textobj-ifdef-a)']]
\ }}

[[plugins]]
repository = 'akiyan/vim-textobj-php'
" , {'autoload':{
" \ 'mappings' : [['nvo', '<Plug>(textobj-php-', ]]}}

