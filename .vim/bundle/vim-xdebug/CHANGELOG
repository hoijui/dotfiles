" DBGp client: a remote debugger interface/client to the DBGp protocol
"
"=============================================================================
" Script Info and Documentation
"=============================================================================
" Name Of File: debugger.vim, debugger.py
"  Description: remote debugger client/interface to DBGp protocol
"   Maintainer: Hadi Zeftin <slack.dna <at> gmail.com>
"  Last Change: January 7, 2009
"          URL: http://www.vim.org/scripts/script.php?script_id=2508
"      Version: 1.0.2
"               Originally written by Seung Woo Shin <segv <at> sayclub.com>
"               at	http://www.vim.org/scripts/script.php?script_id=1152
"               Developed by Sam Ghods <sam <at> box.net>
"               at http://www.vim.org/scripts/script.php?script_id=1929
"        Usage: 
"               to set the socket waiting time before timeout(default 
"               5 second) use :
"               
"                 let g:debuggerTimeout = 10
"
"               above snippet use 10 second 
"
"               By default the script will create a dedicated tab for each 
"               debugging session, 
"
"                 let g:debuggerDedicatedTab = 1
"
"               if you dont want a dedicated tab for each debugging session
"               change it to 0, remember you would lost undo history on that
"               tab!
"
"               note : 
"               if you are using gVim/vim.gui and want to use a dedicated tab 
"               make sure to always show tab
"
"               if has("gui_running")
"                 if has("gui_gtk2")
"                   set showtabline=2
"                 endif
"               endif
"
"               put the snippet above on your ~/.vimrc file, this is
"               regarding the resize bug on vim with gtk
"
"
"
"               Wrote by Sam Ghods :
"
"               This file should reside in the plugins directory along
"               with debugger.py and be automatically sourced.
"
"               By default, the script expects the debugging engine to connect
"               on port 9000. You can change this with the g:debuggerPort
"               variable by putting the following line your vimrc:
"
"                 let g:debuggerPort = 10001
"
"               where 10001 is the new port number you want the server to
"               connect to.
"
"               There are three maximum limits you can set referring to the
"               properties (variables) returned by the debugging engine.
"
"               g:debuggerMaxChildren (default 32): The max number of array or
"               object children to initially retrieve per variable.
"               For example:
"
"                 let g:debuggerMaxChildren = 64
"
"               g:debuggerMaxData (default 1024 bytes): The max amount of
"               variable data to retrieve.
"               For example:
"
"                 let g:debuggerMaxData = 2048
"
"               g:debuggerMaxDepth (default 1): The maximum depth that the
"               debugger engine may return when sending arrays, hashs or
"               object structures to the IDE.
"               For example:
"
"                 let g:debuggerMaxDepth = 10
"
"               Finally, if you use the Mini Buffer Explorer vim plugin,
"               minibufexpl.vim, running the debugger may mess up your window
"               setup. As a result the script has support to close and open
"               the explorer when you enter and quit debugging sessions. To
"               enable this support, add the following line to your vimrc:
"
"                 let g:debuggerMiniBufExpl = 1
"
"      History: 1.0.1 o create a dedicated tab for debugging for every new
"                       debugging session, to retain undo history for other tab
"                       contributed by Michael Bahnmiller
"               1.0   o add tab-page support for Vim 7.x from Sam Ghods latest script
"                       at http://www.vim.org/scripts/script.php?script_id=1929
"      
" Known Issues: o if you are using gVim, makesure the showtabline options set to
"                 2 (always show tab) before start a new debugging session, 
"                 this is a known problem to the gtk/gnome build about
"                 gui window resizing.
"               o there are possibility after each debugging session ends, the
"                 folding, coloring, etc goes weird. this may occur if you're using 
"                 a custom syntax file, so you might wanna re-source your syntax
"                 file after each debugging session
"
"         Todo: so many to do, but first thing first, revamp the python script
"
"=============================================================================

###############################################################################
1.0.2 changelog from 1.0.1
###############################################################################

changes     :
- add '!' on function declaration to override any declarated function with the
  same name thx to Michael Bahnmiller
- add new path to check for a windows system. If you are using windows put the
  files (debugger.vim and debugger.vim) your $VIM/vimfiles/plugin this usually 
  "C:\Program Files\Vim\vimfiles\plugin" thx to ning

bug fixes   :
- bugs on windows system regarding the file path (from xdebug xml message)
  which append '/' at the beginning, thx to Ning for notified me
- cannot set breakpoint when the debugger isn't running (my bad) thx to Michael
  Bahnmiller

known issue :
- do not reorder tab while debugging session is running!, unless you want to 
  see crazy things


###############################################################################
1.0.1 changelog from 1.0.0
###############################################################################

new         :
- add option to use dedicated debugging tab (this way you dont have to worry
  bout your undo history in other tab would get lost) suggested by Michael
  Bahnmiller
- add option to set socket timeout

changes     :
- update file header in debugger.py and debugger.vim
- if a debugging command reach code end, and the debugger stop gracefully, the
  debugging interface will be closed/restore automatically, user doesnt have to
  explicitly press F6
- the TRACE_WINDOW will only visible if the debugger is in debugging mode, or
  when g:debuggerDebugMode=1, cause it's the only purpose of a trace window
  (logging and tracing), in normal use you wouldn't use this window, it will
  save more space
- "Not Connected" message is change to "Debugger is not running" message
- the F5 and F6 doesnt get map directly to python function, but to a VimScript
  function, this way user can write a preparation for each debugging start, or
  cleanups for every debugging ends
- add "except: NotConnectedException" for every try..except.. wrapper function
  which display Not Running message, to make sure each of this command only
  used when debugging session is started

bug fixes   :
- remove error message duplication
- remove bug when timeout happen(trace window shown up, with a some exception
  error) and show "Connection Timeout.." message instead

###############################################################################
1.0.0 changelog from basescript :
###############################################################################

new         :
- add tab-page support

bug fixes   :
- remove bug when debugging session ends original tabs duplicated
- will only restore working/debugging tab, doesn't mess with other tab
- each command will make sure that user are opening the working/debugging tab,
  so the window layout wouldn't get crazy anymore
