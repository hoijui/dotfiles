# Class
snippet class
	class ${1:name}
		constructor: (${2:params...}) ->
			${3://body...}

# Funcion
snippet fun
	${1:function_name} = (${2:argumen}) ->
		${3: //body...}
# Function (bound)
snippet bfun
	(${1:args}) =>
		${2:// body...}

# Asignation if
snippet =if
	${1:variable} = ${2:valor} if ${3:condition}

# Asignation if and
snippet ifand
	if ${1} and ${2}

# Asignation if then else
snippet =ifthen
	${1: value} = if ${2:option} then ${3:asignation} else ${4:else}

# Asignation or=
snippet or=
	${1:options} or= ${2:defaults}

# Array comprehension
snippet fora
	for ${1:name} in ${2:array}
		${3:// body...}
# Object comprehension
snippet foro
	for ${1:key}, ${2:value} of ${3:object}
		${4:// body...}
# Range comprehension (inclusive)
snippet forr
	for ${1:name} in [${2:start}..${3:finish}]
		${4:// body...}
snippet forrb
	for ${1:name} in [${2:start}..${3:finish}] by ${4:step}
		${5:// body...}
# Range comprehension (exclusive)
snippet forrex
	for ${1:name} in [${2:start}...${3:finish}]
		${4:// body...}
snippet forrexb
	for ${1:name} in [${2:start}...${3:finish}] by ${4:step}
		${5:// body...}

# Asignation forin
snippet forin
	${1:countdown} = (${2:num} for ${3:num} in ${4:[10..1]})

# Asignation forof
snippet forof
	${1:ages} = for ${2:key}, ${3:value} of ${4:yearsOld}
		key + " is " + value

# Asignation while
snippet while
	${1:action()} while ${2:condition}

# Asignation until
snippet until
	${1:action()} until ${2:condition}

# Asignation forindo
snippet forindo
	for ${1:filename} in ${2:list}
		do (${3:filename}) ->

# Asignation try
snippet try
	try
		${1:expresion}
	catch ${2:error}
		${3}

# Asignation tryfin
snippet tryfin
	try
		${1:expresion}
	catch error
		${2:error}
	finally
		${3:cleanAll()}

# Asignation ?=
snippet ?=
	${1:speed} ?= ${2:75}

# Asignation =?
snippet =?
	${1:footprints} = ${2:yetis} ? ${3:bear}

# Asignation switch
snippet switch
	switch ${1:day}
		when ${2:Mon} then ${3:go work}
		else ${4:go relax}

# Asignation ##
snippet ##
	###
		${1:comment}
	###

## Jasmine Snippets
## Thibault NORMAND <Zenithar>
##
snippet desc
	# ${1:Specification}
	describe '${2:Model or When ...}', ->
		${3}
		return

snippet it
	it '${1:Should ...}', ->
		${2}

snippet exp
	expect(${1:predicate})

snippet exp=
	expect(${1:predicate}).toEqual ${2:value}

snippet expmatch
	expect(${1:predicate}).toMatch /${2:regex}/

snippet expdef
	expect(${1:predicate}).toBeDefined

snippet expnull
	expect(${1:predicate}).toBeNull

snippet exptrue
	expect(${1:predicate}).toBeThruthy

snippet expfalse
	expect(${1:predicate}).toBeFalsy()

snippet expcon
	expect(${1:predicate}).toContain ${2:value}

snippet befe
	# Configuration
	beforeEach ->
		${1}

snippet spyon
	spyOn ${1:object}, ${2:method}

snippet expcall
	expect(${1:predicate}).wasCalled

snippet expncall
	expect(${1:predicate}).wasNotCalled

snippet expcallw
	expect(${1:predicate}).wasCalledWith ${2:arguments}

snippet expncallw
	expect(${1:predicate}).wasNotCalledWith ${2:arguments}

# Log
snippet log
	console.log ${1}
# Require
snippet req
	${2:$1} = require '${1:sys}'${3}

snippet fn
	(${1:d, i}) -> ${2}

snippet .at
	.attr(${1})${2}

snippet .attr
	.attr(${1})${2}


snippet .css
	.css(${1})${2}

snippet .on
	.on('${1}', ${2})

snippet direct_exec
	if !module.parent)
		${1}

snippet require_delete
	require('${1}')
	delete(require.cache[path.resolve('$1')])

# Define a new Angular Controller;
# You can change the controller name and parameters
snippet ngc
	${1:controllerName} = (${2:scope}, ${3:injectables}) ->
		${4}
# angular.foreach loop
snippet ngfor
	angular.forEach ${1:iterateOver}, (value, key) ->
		${2}
## Module Based Snippets
# A new angular module without a config function
snippet ngm
	angular.module '${1:moduleName}', [${2:moduleDependencies}]
	${3}
# A new angular module without a config function and a variable assignment
snippet ngma
	${1:moduleName} = angular.module '$1', [${2:moduleDeps}]
	${3}
# A new angular module with a config function
snippet ngmc
	${1:moduleName} = angular.module('$1', [${2:moduleDeps}], (${3:configDeps}) ->
		${4}
	)
# A factory in a module
snippet ngmfa
	factory '${1:factoryName}', (${2:dependencies}) ->
		${3}
# Define an Angular Module Service to be attached to a previously defined module
# You can change the service name and service injectables
snippet ngms
	service '${1:serviceName}', (${2:injectables}) ->
		${3}
# Define an Angular Module Filter to be attached to a previously defined module
# You can change the filter name
snippet ngmfi
	filter '${1:filterName}', (${2:injectables}) ->
		(input, ${3:args}) ->
			${4}
## Route Based Snippets
# Defines a when condition of an AngularJS route
snippet ngrw
	$routeProvider.when '${1:url}',
		templateUrl: '${2:templateUrl}'
		controller: '${3:controller}'
	${4}
# Defines a when condition of an AngularJS route with the resolve block
snippet ngrwr
	$routeProvider.when '${1:url}',
		templateUrl: '${2:templateUrl}'
		controller: '${3:controller}'
		resolve:
			${4}
	${5}
# Defines an otherwise condition of an AngularJS route
snippet ngro
	$routeProvider.otherwise redirectTo: '${1:url}'
	${2}
## Scope Related Snippets
# Define a new $scope'd function (usually inside an AngularJS Controller)
# You can change the function name and arguments
snippet $f
	$scope.${1:functionName} = (${2:args}) ->
		${3}
# Defines a new $scope'd variable inside an AngularJS controller
snippet $v
	$scope.${1:variable} = ${2:value}
	${3}
# Defines a new $scope'd variable inside an AngularJS controller and assigns a value from a constructor arguments
snippet $va
	$scope.${1:variable} = ${2:variable}
	${3}
# Define a $watch for an expression
# You can change the expression to be watched
snippet $w
	$scope.$watch '${1:watchExpr}', (newValue, oldValue) ->
		${2}
# Define a $on for a $broadcast/$emit on the $scope inside an Angular Controller
# You can change the event name to listen on
snippet $on
	$scope.$on '${1:eventName}', (event, ${2:args}) ->
		${3}
# Define a $broadcast for a $scope inside an Angular Controller / Angular Controller Function
# You can change the event name and optional event arguments
snippet $b
	$scope.$broadcast '${1:eventName}', ${2:eventArgs}
	${3}
# Define an $emit for a $scope inside an Angular Controller / Angular Controller Function
# You can change the event name and optional event arguments
snippet $e
	$scope.$emit '${1:eventName}', ${2:eventArgs}
	${3}
## Directive related snippets
# A compile function
snippet ngdcf
	compile = (tElement, tAttrs, transclude) ->
		(scope, element, attrs) ->
			${1}
# A linking function in a directive
snippet ngdlf
	(scope, element, attrs${1:ctrl}) ->
		${2}
# A directive with a compile function
snippet ngdc
	directive '${1:directiveName}', factory = (${2:injectables}) ->
		directiveDefinitionObject =
			${3:directiveAttrs}
			compile: compile = (tElement, tAttrs, transclude) ->
				(scope, element, attrs) ->
		directiveDefinitionObject
# A directive with a linking function only
snippet ngdl
	.directive('${1:directiveName}', (${2:directiveDeps}) ->
		(scope, element, attrs${3:ctrl}) ->
			${4}
	)
