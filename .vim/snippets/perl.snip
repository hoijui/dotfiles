# #!/usr/bin/perl
snippet #!
	#!/usr/bin/perl
	${1}

# Hash Pointer
snippet .
	 => ${1}
# Function
snippet sub
	sub ${1:function_name} {
		${2:# body...}
	}
# Conditional
snippet if
	if (${1}) {
		${2:# body...}
	}
# Conditional if..else
snippet ife
	if (${1}) {
		${2:# body...}
	} else {
		${3:# else...}
	}
# Conditional if..elsif..else
snippet ifee
	if (${1}) {
		${2:# body...}
	} elsif (${3}) {
		${4:# elsif...}
	} else {
		${5:# else...}
	}
# Conditional One-line
snippet xif
	${1:expression} if ${2:condition};${3}
# Unless conditional
snippet unless
	unless (${1}) {
		${2:# body...}
	}
# Unless conditional One-line
snippet xunless
	${1:expression} unless ${2:condition};${3}
# Try/Except
snippet eval
	eval {
		${1:# do something risky...}
	};
	if ($@) {
		${2:# handle failure...}
	}
# While Loop
snippet wh
	while (${1}) {
		${2:# body...}
	}
# While Loop One-line
snippet xwh
	${1:expression} while ${2:condition};${3}
# For Loop
snippet for
	for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4:# body...}
	}
# Foreach Loop
snippet fore
	foreach my $${1:x} (@${2:array}) {
		${3:# body...}
	}
# Foreach Loop One-line
snippet xfore
	${1:expression} foreach @${2:array};${3}
# Package
snippet cl
	package ${1:ClassName};

	use base qw(${2:ParentClass});

	sub new {
		my $class = shift;
		$class = ref $class if ref $class;
		my $self = bless {}, $class;
		$self;
	}

	1;${3}

snippet news
	sub new {
		my $class = shift;
		my $self = {};
		bless $self, $class;
		$self;
	}
	${1}

# Read File
snippet slurp
	my $${1:var};
	{ local $/ = undef; local *FILE; open FILE, "<${2:file}"; $$1 = <FILE>; close FILE }${3}

snippet dump
	use Data::Dumper; warn Dumper ${1:$var};
	${2}
snippet say
	print ${1:$var}, "?n";
	${2}
snippet self
	my $self = shift;
	${2}
snippet data
	my $data = do {
		local $/;
		<data>
	};
	${1}
snippet argf
	while (<>) {
		chomp;
		${1}
	}
	${2}
snippet isa
	if (blessed ${1:$var} and ${2:$var}->isa('${3:Class}')) {
		${4}
	}
	${5}
snippet readcsv
	use IO::File;
	use Text::CSV_XS;

	my $fh = IO::File->new('${1:filename}') or die 'cannot open file.';
	my $csv = Text::CSV_XS->new({ sep_char => "?t", binary => 1 });
	until ($fh->eof) {
		my $cols = $csv->getline($fh);
		unless ($cols) {
			warn $csv->error_diag;
			next;
		}
		my (${2}) = @$cols;
	}
	$fh->close;
	${3}

#class-C3
snippet next
	$self->next::method(@_);
	${1}
snippet maybe
	$self->maybe::next::method(@_);
	${1}

#try-catch
snippet try
	use Error qw(:try);
	try {
	} catch Error with {
		my $e = shift;
		warn "$e->text";
	};
#DBI
snippet dbim
	use DBI;
	my $dbh = DBI->connect(
		"DBI:mysql:database=${1:db}:host=${2:localhost}:port=${3:3306}",
		${4:user}, ${5:pwd}, {mysql_auto_reconnect => 1});
	$dbh->{AutoCommit} = 0;
	$dbh->{RaiseError} = 1;
	$dbh->disconnect;
#Catalyst
snippet debug
	$c->log->debug('${1:[ debug ]}: '. ${2:$var});
	${3}
snippet warn
	$c->log->warn('${1:[ warn ]}: '. ${2:$var});
	${3}
snippet dumper
	$c->log->dumper('${1:[ dumper ]}: '. ${2:$var});
	${3}
snippet model
	$c->model('${1:model}')
	${2}
snippet view
	$c->view('${1:view}')
	${2}
snippet template
	$c->view('View::TT')->template('${1:name}');
	${2}
snippet config
	$c->config->{${1:name}}
	${2}
snippet controller
	sub ${1:func} : ${2:Attribute} {
		my ($self, $c) = @_;
		${3}
	}
	${4}
snippet begin
	sub begin : Private {
		my ($self, $c) = @_;
		${1}
		1;
	}
	${2}
snippet auto
	sub auto : Private {
		my ($self, $c) = @_;
		${1}
		1;
	}
	${2}
snippet detach
	$c->detach('${1:name}');
	${2}
snippet forward
	$c->forward('${1:name}');
	${2}
snippet stash
	$c->stash->{${1:var}}${2}
snippet flash
	$c->flash->{${1:var}}${2}
snippet session
	$c->session->{${1:var}}${2}
snippet sstash
	$c->stash->{${1:var}} = ${2};
	${3}
snippet sflash
	$c->flash->{${1:var}} = ${2};
	${3}
snippet ssession
	$c->session->{${1:var}} = ${2};
	${3}
snippet rs
	$c->model('DBIC::${1:Source}')
	${2}
snippet redirect
	$c->res->redirect($c->uri_for('${1:uri}'));
	${2}
snippet param
	$c->req->param('${1:param}')
	${2}

snippet openr
	open my ${1:$fh}, '<', ${2:path} or die "$2: $!";
	while (<$1>) {
		$3
	}
	close($1);

snippet openw
	open my ${1:$fh}, '>', ${2:path} or die "$2: $!";
	print $1 ${3}
	close($1);
snippet opena
	open my ${1:$fh}, '>>', ${2:path} or die "$2: $!";
	print $1 ${3}
	close($1);
snippet cla
	package ${1};
	use base(Class::Accessor::Lite);
	__PACKAGE__->mk_accessors(qw//);

	sub new {
		my ($class, $args) = @_;
		my $self = {
			${2}
		};
		bless $self, $class;
	}
snippet autoload
	sub AUTOLOAD {
		my ($self) = @_;
		my $func   = $AUTOLOAD;
		return if $func =~ /::DESTROY$/;

		my ($class,$method) = $func =~ /(.+)::(.+)$/;
		my $code   = sub {
			my $self = shift;
			$self->{$method} = shift if @_;
			return $self->{$method};
		};

		no strict 'refs';
		*{$func} = $code;
		goto &$code;
	}
# http://perl-users.jp/articles/advent-calendar/2012/casual/13
snippet     dumper
	use Data::Dumper; warn Dumper(${1:code});

snippet     querylog
    require DBIx::QueryLog; my $guard = DBIx::QueryLog->guard();
# http://qiita.com/Cside_/items/b36c9bb1c3b3a2d73bff
snippet u
	#!/usr/bin/env perl
	use 5.10.0;
	use strict;
	use warnings;

snippet d
	use Data::Dump qw(dump);
	warn dump

snippet dd
	use Data::Dumper;
	local $Data::Dumper::Indent = 1;
	local $Data::Dumper::Terse  = 1;
	warn Dumper

snippet dds
	use Data::Dump::Streamer qw(Dumper);
	warn Dumper

snippet c
	use Carp qw/croak/;

snippet n
	sub new {
		my $class = shift;
		my $args = ref $_[0] ? $_[0] : +{@_};

		${1:code}

		bless $args, $class;
	}

snippet l
	use Class::Accessor::Lite

snippet ll
	Clas::Accessor::Lite->mk_accessors(${1:accessors});

snippet t
	#!/usr/bin/env perl -w
	use strict;
	use Test::More;

	subtest => sub {
	};

	done_testing;

snippet s
	my ($self) = @_;

snippet ex
	use parent qw(Exporter);
	our @EXPORT_OK = qw();

snippet plack
	use Plack::Request;
	sub {
		my $req = Plack::Request->new($_[0]);
		given ($req->path) {
			when ('/') {
				$req->param('');
				return [200, ["Content-Type" => "text/html"], ['200 OK']];
			}
		}
		return [404, ["Content-Type" => "text/plain"], ['404 Not Found']];
	};

snippet file
	use Path::Class qw(file);
	my @lines = file(__FILE__)->dir->file('/path/to/file')->slurp;

snippet r200
	[ 200, ['Content-Type', 'text/plain'], ['200 OK'] ]

snippet r404
	[ 404, ['Content-Type', 'text/plain'], ['404 Not Found'] ]
