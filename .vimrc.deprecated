" scroll {{{1
if 1 " {{{4 http://vim-users.jp/2011/04/hack213/

else " {{{4 altanative
  augroup vimrc-scroll-mouse
    autocmd!

    let s:org_scrolloff=-1
    function! s:noscrolloff_leftmouse()
      set eventignore=CursorMoved,CursorMovedI
      if s:org_scrolloff < 0
        let s:org_scrolloff = &scrolloff
      endif
      let &scrolloff = 0
      exe 'normal!' "\<LeftMouse>"
      " let &scrolloff = org_scrolloff
      autocmd CursorMoved * call s:restore_noscrolloff()
      set eventignore=
    endfunction

    function! s:restore_noscrolloff()
      autocmd!
      if s:org_scrolloff < 0
        return
      endif
      let &scrolloff = s:org_scrolloff
      let s:org_scrolloff = -1
    endfunction
    " autocmd CursorMoved * call s:restore_noscrolloff()
    nnoremap <silent> <LeftMouse>       :call <SID>noscrolloff_leftmouse()<CR>
    nnoremap          <2-LeftMouse>     g*
  augroup END
endif "}}}
" vmap              <LeftMouse> <Plug>(visualstar-g*)

" translate maps {{{1
" vnoremap <Leader>tj    :GoogleTranslate ja<CR>
" vnoremap <Leader>tj    :BingTranslate ja<CR>

" unite-greplauncher {{{1
" NeoBundleLazy 'daisuzu/unite-grep_launcher', { 'autoload' : {
"       \ 'unite_sources' : ['grep_launcher'],
"       \ }}
  " unite-grep_launcher {{{3
  if s:bundle.is_installed('unite-grep_launcher')
    if !exists('g:grep_launcher_words')
      let g:grep_launcher_words = {}
    endif
    call extend(g:grep_launcher_words, {
      \ 'TODO' : s:regexp_todo,
      \ })
  endif


" let-modeline {{{1
" NeoBundle 'vim-scripts/let-modeline.vim'
" let-modeline.vim {{{2
if s:bundle.tap('let-modeline.vim')
  function! s:bundle.tapped.hooks.on_source(bundle)
    MyAutoCmd BufEnter * call FirstModeLine()
    " MyAutoCmd BufNewFile * let b:this_is_new_buffer=1
  endfunction
  call s:bundle.untap()
endif


" airline {{{1
" NeoBundle 'bling/vim-airline'

" NeoBundleLazy "osyo-manga/unite-airline_themes", {'autoload':{
"       \ 'unite_sources' : ['airline_themes'],
"       \ }}
" airline {{{2
if s:bundle.tap('vim-airline')
  let g:airline_left_sep='|'
  let g:airline_right_sep='|'
  let g:airline_linecolumn_prefix = ':'
  let g:airline_branch_prefix = 'BR:'
  let g:airline_paste_symbol = '[P]'
  let g:airline_readonly_symbol = '[R]'

  let g:airline_enable_syntastic=0
  " let g:airline_powerline_fonts=0
  let g:airline_enable_branch=1
  let g:airline_detect_modified=1
  let g:airline_detect_paste=1
  let g:airline_detect_iminsert=1
  let g:airline_theme='powerlineish'
  call s:bundle.untap()
endif


" NeoBundleLazy 'Lokaltog/powerline', { 'rtp' : 'powerline/bindings/vim'}
" NeoBundle 'zhaocai/linepower.vim'
" NeoBundleLazy 'Lokaltog/vim-powerline'

" vim-powerline {{{1
" vim-powerline {{{2
if s:bundle.is_installed('vim-powerline')
  if !has('vim_starting') && exists('*Pl#UpdateStatusline')
    call Pl#UpdateStatusline(1)
  endif
endif
" powerline {{{1
" powerline {{{2
if s:bundle.is_installed('powerline')
  let g:unite_force_overwrite_statusline = 0
  " let g:powerline_config_path = expand('~/.vim/powerline')
  let g:powerline_config_overrides = {
        \  "common": {
        \    "dividers": {
        \      "left": {
        \        "hard": " > ",
        \        "soft": "|",
        \      },
        \      "right": {
        \        "hard": " < ",
        \        "soft": " | ",
        \      }
        \    },
        \  },
        \ }
  let g:powerline_theme_overrides__default = {
        \  "segment_data": {
        \    "mode" : {
        \      "args": {
        \        "override": {
        \          "n": "NORMAL",
        \          "v": "VISUAL",
        \          "i": "INSERT",
        \          "R": "REPLACE",
        \          "!": "SHELL",
        \        },
        \      },
        \    },
        \    "branch": {
        \      "before": "BR:",
        \    },
        \    "modified_indicator": {
        \      "args": { "text": "+" },
        \    },
        \    "readonly_indicator": {
        \      "args": { "text": "[R]" },
        \    },
        \    "line_percent": {
        \      "after": "%"
        \    },
        \    "line_current_symbol": {
        \      "contents": "LN",
        \    },
        \  },
        \ }
  if s:bundle.is_installed('linepower.vim')
    if !s:is_win && !isdirectory(expand('~/.config/powerline'))
      call system(printf("cp -r %s ~/.config/powerline",
            \ neobundle#get('linepower.vim').path . "/config" ))
    endif
    " let g:powerline_config_path = neobundle#get('linepower.vim').path . "/config"
    " let g:powerline_config_path = neobundle#get('powerline').path . "/powerline/config_files"
  endif

  if !has('vim_starting') && exists('*PowerlineNew')
    set statusline=%!PowerlineNew()
    call PowerlineNew()
    redraw!
  endif
endif

if !has('vim_starting')
else
  " function! s:powerline_init()
  "   if &diff || &filetype =~# 'gitcommit\|svn\|hgcommit'
  "     " do nothing
  "   elseif !s:is_win && (has('python') || has('python3'))
  "     NeoBundleSource powerline
  "   else
  "     NeoBundleSource vim-powerline
  "   endif
  " endfunction
  " Lazy call s:powerline_init()

endif

" dotnet-complete {{{1
" NeoBundle 'yuratomo/dotnet-complete'
" csharp {{{2
if s:bundle.is_installed('dotnet-complete')
  MyAutoCmd BufNewFile,BufRead *.xaml    setf xml | setl omnifunc=xaml#complete
  MyAutoCmd BufNewFile,BufRead *.cs      setl omnifunc=cs#complete
  MyAutoCmd BufNewFile,BufRead *.cs      setl bexpr=cs#balloon() | setl ballooneval
endif
