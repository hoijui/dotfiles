scriptencoding utf-8
set nocompatible

" environment {{{1
let $VIM_CACHE = $HOME . '/.cache'

let s:is_mac = has('mac') || has('macunix') || has('gui_macvim') || (executable('uname') && system('uname') =~? '^darwin')
let s:is_win = has('win16') || has('win32') || has('win64')

function! s:mkdir(path)
  if !isdirectory(a:path)
    call mkdir(a:path, "p")
  endif
endfunction

function! s:has_plugin(plugin_path)
  return strlen(globpath(&rtp, a:plugin_path))
endfunction

augroup vimrc-myautocmd
  autocmd!
augroup END
command! -bang -nargs=* MyAutoCmd autocmd<bang> vimrc-myautocmd <args>
command! -nargs=* Lazy autocmd vimrc-myautocmd VimEnter * <args>
" }}}

" basic settings {{{1
" set encoding=japan
set encoding=utf-8
if s:is_win
  set termencoding=cp932
else
  set termencoding=utf-8
endif
" set fileencoding=utf-8
set fileformat=unix
set fileencodings=ucs-bom,utf-8,iso-2022-jp,cp932,euc-jp
set fileformats=unix,dos,mac

set display=lastline
set clipboard=unnamed
if has('unnamedplus')
  set clipboard+=unnamedplus
endif

" set nospell
set spell
set spelllang=en_us
set spellfile=~/.vim/spell/spellfile.utf-8.add
set noautochdir
set shellslash
set directory=$VIM_CACHE,/var/tmp,/tmp
call s:mkdir($VIM_CACHE)

set viminfo&
set viminfo+=! viminfo+=n$VIM_CACHE/pager-viminfo.txt

" diff {{{2
set diffopt& diffopt-=filler diffopt+=iwhite

" display {{{2
set lazyredraw ttyfast
set scrolloff=10000000
set sidescrolloff=999
set number ruler

set mouse=nch
set nomousefocus
set mousehide
set timeoutlen=1000
set ttimeoutlen=50

set showmatch showcmd showfulltag
set backspace=indent,eol,start
set nolinebreak
set textwidth=1000
set formatoptions& formatoptions+=mM
set whichwrap=b,s,h,l,<,>,[,]

set splitbelow splitright
set switchbuf=useopen
set title

set hidden
set sidescroll=5
set visualbell
set noerrorbells

set guioptions& guioptions+=T guioptions-=m guioptions-=M
let did_install_syntax_menu = 1
set noequalalways
set langmenu=none
set helplang=ja,en
set keywordprg=":help"
set foldmethod=marker

" tab character {{{2
set autoindent smartindent cindent
set list
set listchars=tab:^\ ,trail:~,nbsp:%,extends:>,precedes:<
set smarttab             " インテリジェンスなタブ入力
set noexpandtab
"set softtabstop=4 tabstop=4 shiftwidth=4
set softtabstop=0 tabstop=2 shiftwidth=2

if exists('&ambiwidth')
  set ambiwidth=double
endif


set nowrap
set nrformats-=octal
set updatetime=200
if has('winaltkeys')
  set winaltkeys=no
endif
set modeline
set modelines=10

" search {{{2
set ignorecase smartcase wrapscan
set incsearch hlsearch
set virtualedit+=block

" backup {{{2
set nobackup noswapfile nowritebackup
set autoread
set backupcopy=yes
set backupskip=/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*,*.tmp,crontab.*
set backupdir=$VIM_CACHE/vim-backups
set viewdir=$VIM_CACHE/vim-views
call s:mkdir(&backupdir)
call s:mkdir(&viewdir)
if has('persistent_undo')
  set undodir=$VIM_CACHE/vim-undo
  call s:mkdir(&undodir)
  set undofile
endif

" completion {{{2
set wildmenu
set wildmode=list:longest,full
set wildchar=<tab>
set wildignore+=*.o,*.obj,.git,*.rbc,.class,.svn
set wildignore+=*DS_Store*,*.png,*.jpg,*.gif
set wildignore+=*.so,*.swp,*.pdf,*.dmg
set wildignore+=*.luac,*.jar,*.pyc,*.stats
set completeopt=menuone,preview
set complete=.,w,b,u,t,i,k

" statusline {{{2
set laststatus=2
set modeline
set modelines=10
function! MyStatusLine()
  let s = ''
  let s .= '%<'
  let s .= '%f ' " filename
  let s .= '%m' " modified flag
  let s .= '%r' " readonly flag
  let s .= '%h' " help flag
  let s .= '%w' " preview flag
  let s .= '%='
  let s .= '[%{&l:fenc}]'
  let s .= '[%{&l:ff}] %{&l:ft} '
  let s .= '< L%l:%c%V ' " current line status
  let s .= '%8P'
  return s
endfunction
set statusline=%!MyStatusLine()

" }}}

" mappings {{{1
cnoremap <C-x> <C-r>=expand('%:p:h')<CR>/
nnoremap q <Nop>
nnoremap Q q

nnoremap / :nohl<CR>/
nnoremap ? :nohl<CR>?

function! s:tselect_immediately()
  execute 'normal!' (len(taglist(expand('<cword>'))) > 1 ? "g" : "")."\<C-]>"
endfunction

nnoremap te t
nnoremap <silent> [!t]t :<C-u>call <SID>tselect_immediately()<CR>
nnoremap <silent> <C-w>tt <C-w>s:<C-u>call <SID>tselect_immediately()<CR>
nnoremap <silent> [!t]j :<C-u>tag<CR>
nnoremap <silent> [!t]k :<C-u>pop<CR>
nnoremap <silent> [!t]l :<C-u>tselect<CR>
" }}}

" commands {{{1
function! SudoWrite(url) abort
  let file = a:url == "<afile>" ? expand(a:url) ? a:url
  let prot=matchstr(file,'^\(sudo\)\ze:')
  if '' != prot
    let file=strpart(file,strlen(prot)+1)
  endif
  set nomodified
  execute '%write !sudo tee >/dev/null "'.file.'"'
endf
command! -nargs=1 SudoWrite call SudoWrite(<f-args>)
" }}}

if v:version > 702
elseif 0 " plugin load {{{1
  filetype off
  silent call pathogen#infect()

  " mkdir -p ~/.vim/autoload ~/.vim/bundle; curl -Lso ~/.vim/autoload/pathogen.vim https://raw.github.com/tpope/vim-pathogen/HEAD/autoload/pathogen.vim; mkdir -p ~/.vim/bundle ; cd ~/.vim/bundle;
  " git clone https://github.com/Shougo/vimfiler.git
  " git clone https://github.com/Shougo/unite.vim.git
  " curl -L https://github.com/Shougo/vimfiler/tarball/master | tar zxv
  " curl -L https://github.com/Shougo/unite.vim/tarball/master | tar zxv

  let g:vimfiler_as_default_explorer = 1
  let g:vimfiler_safe_mode_by_default = 0
  " let g:vimfiler_edit_command = 'new'

  if s:has_plugin(plugin_path, 'plugin/unite.vim')
    nnoremap [unite] <Nop>
    nmap     f       [unite]
    nnoremap [unite]f f
    let g:unite_enable_start_insert=0
    let g:unite_source_file_mru_limit=200
    let g:unite_source_file_mru_time_format = ''
    let g:unite_winheight = 20
    let g:unite_source_file_ignore_pattern = '\%(^\|/\)\.$\|\~$\|\.\%(o|exe|dll|bak|sw[po]\)$\|/chalice_cache/\|/-Tmp-/'

    nmap <silent> [unite]j       :<C-u>Unite buffer_tab<CR>
    nmap <silent> [unite]l       :<C-u>Unite file<CR>
    nmap <silent> [unite]m       :<C-u>Unite file_mru directory_mru<CR>
    nmap <silent> [unite]k       :<C-u>Unite tab<CR>
  else
    function! s:plugin_install()
      if input("install plugin? [y/n]:") != "y"
        echo "Canceled."
        return
      endif
      call mkdir(expand("~/.vim/autoload"))
      call mkdir(expand("~/.vim/bundle"))
      call system("curl -Lso ~/.vim/autoload/pathogen.vim https://raw.github.com/tpope/vim-pathogen/HEAD/autoload/pathogen.vim")
      let cwd = getcwd()
      execute 'lcd' expand('~/.vim/bundle')
      if executable('git')
        call system('git clone https://github.com/Shougo/vimfiler.git')
        call system('git clone https://github.com/Shougo/unite.vim.git')
      else
        call system('curl -L https://github.com/Shougo/vimfiler/tarball/master | tar zxv')
        call system('curl -L https://github.com/Shougo/unite.vim/tarball/master | tar zxv')
      endif
      execute 'lcd' cwd
    endfunction
    command! -nargs=0 PluginInstall call s:plugin_install()
  endif
endif "}}}

filetype indent plugin on
syntax enable

set background=dark
colorscheme vividchalk

" some autoload {{{1

" __END__ {{{1
" vim:fdm=marker sw=2 ts=2 ft=vim expandtab:
