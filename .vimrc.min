scriptencoding utf-8
if &compatible
  set nocompatible
endif

" environment {{{1
let $VIM_CACHE = $HOME . '/.cache/vim'
let s:standalone = 0

let s:is_mac = has('mac') || has('macunix') || has('gui_macvim') || (executable('uname') && system('uname') =~? '^darwin')
let s:is_win = has('win16') || has('win32') || has('win64')

function! s:mkdir(path)
  if !isdirectory(a:path)
    call mkdir(a:path, "p")
  endif
endfunction

function! s:has_plugin(plugin)
  if exists(':NeoBundle')
    return neobundle#is_installed(a:plugin)
  endif
  return strlen(globpath(&rtp, '*/'.a:plugin))
endfunction

augroup vimrc-myautocmd
  autocmd!
augroup END
command! -bang -nargs=* MyAutoCmd autocmd<bang> vimrc-myautocmd <args>
command! -nargs=* Lazy autocmd vimrc-myautocmd VimEnter * <args>
" }}}
" basic settings {{{1
" set encoding=japan
if s:is_win
  set termencoding=cp932
else
  set encoding=utf-8
  set termencoding=utf-8
endif
" set fileencoding=utf-8
set fileformat=unix
set fileencodings=ucs-bom,utf-8,iso-2022-jp,cp932,euc-jp
set fileformats=unix,dos,mac

set display=lastline
set clipboard=unnamed
if has('unnamedplus')
  set clipboard+=unnamedplus
endif

set nospell
" set spell
if v:version > 704 || (v:version == 704 && has('patch088'))
  set spelllang=en_us,cjk
else
  set spelllang=en_us
endif
set spellfile=~/.vim/spell/spellfile.utf-8.add
set noautochdir
set shellslash
set directory=$VIM_CACHE,/var/tmp,/tmp
call s:mkdir($VIM_CACHE)

set viminfo&
set viminfo+=! viminfo+=n$VIM_CACHE/pager-viminfo.txt

" diff {{{2
set diffopt& diffopt-=filler diffopt+=iwhite diffopt+=vertical

" display {{{2
set lazyredraw ttyfast
set scrolloff=10000000
set sidescrolloff=999
set number ruler

set mouse=nch
set nomousefocus
set mousehide
set timeoutlen=1000
set ttimeoutlen=50

set showmatch showcmd showfulltag
set backspace=indent,eol,start
set nolinebreak
set textwidth=1000
set formatoptions& formatoptions+=mM
set whichwrap=b,s,h,l,<,>,[,]

set splitbelow splitright
set switchbuf=useopen
set title

set hidden
set sidescroll=5
set visualbell
set noerrorbells t_vb=

set guioptions& guioptions+=T guioptions-=m guioptions-=M
let did_install_syntax_menu = 1
set noequalalways
set langmenu=none
set helplang=ja,en
set keywordprg=":help"
set foldmethod=marker

" tab character {{{2
set autoindent smartindent cindent
if has('linebreak') && (v:version > 704 || v:version == 704 && has('patch338'))
  set breakindent
endif
set list
set listchars=tab:^\ ,trail:~,nbsp:%,extends:>,precedes:<
set smarttab             " インテリジェンスなタブ入力
set noexpandtab
"set softtabstop=4 tabstop=4 shiftwidth=4
set softtabstop=0 tabstop=2 shiftwidth=2

if exists('&ambiwidth')
  set ambiwidth=double
endif


set nowrap
set nrformats-=octal
set updatetime=200
if has('winaltkeys')
  set winaltkeys=no
endif
set modeline
set modelines=10

" search {{{2
set ignorecase smartcase wrapscan
set infercase
set incsearch hlsearch
set virtualedit+=block

" backup {{{2
set nobackup noswapfile nowritebackup
set autoread
set backupcopy=yes
set backupskip=/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*,*.tmp,crontab.*
set backupdir=$VIM_CACHE/vim-backups
set viewdir=$VIM_CACHE/vim-views
call s:mkdir(&backupdir)
call s:mkdir(&viewdir)
if has('persistent_undo')
  set undodir=$VIM_CACHE/vim-undo
  call s:mkdir(&undodir)
  set undofile
endif

" completion {{{2
set wildmenu
set wildmode=list:longest,full
set wildchar=<tab>
set wildignore+=*.o,*.obj,.git,*.rbc,.class,.svn
set wildignore+=*DS_Store*,*.png,*.jpg,*.gif
set wildignore+=*.so,*.swp,*.pdf,*.dmg
set wildignore+=*.luac,*.jar,*.pyc,*.stats
set completeopt=menuone,preview
set complete=.,w,b,u,t,i,k

" statusline {{{2
set laststatus=2
set modeline
set modelines=10
function! MyStatusLine()
  let s = ''
  let s .= '%<'
  let s .= '%f ' " filename
  let s .= '%m' " modified flag
  let s .= '%r' " readonly flag
  let s .= '%h' " help flag
  let s .= '%w' " preview flag
  let s .= '%='
  let s .= '[%{&l:fenc}]'
  let s .= '[%{&l:ff}] %{&l:ft} '
  let s .= '< L%l:%c%V ' " current line status
  let s .= '%8P'
  return s
endfunction
set statusline=%!MyStatusLine()

" }}}

" mappings {{{1
nnoremap q <Nop>
nnoremap Q q

nnoremap / :nohl<CR>/
nnoremap ? :nohl<CR>?

function! s:tselect_immediately()
  execute 'normal!' (len(taglist(expand('<cword>'))) > 1 ? "g" : "")."\<C-]>"
endfunction

nnoremap te t
nnoremap <silent> [!t]t :<C-u>call <SID>tselect_immediately()<CR>
nnoremap <silent> <C-w>tt <C-w>s:<C-u>call <SID>tselect_immediately()<CR>
nnoremap <silent> [!t]j :<C-u>tag<CR>
nnoremap <silent> [!t]k :<C-u>pop<CR>
nnoremap <silent> [!t]l :<C-u>tselect<CR>

"
nnoremap <C-w><Space> <C-w>p
nnoremap *  *N
nnoremap #  #n
nnoremap <C-w>*  <C-w>s*N
nnoremap <C-w>#  <C-w>s#n

inoremap <C-f> <Right>
inoremap <C-b> <Left>
inoremap <C-d> <Delete>
inoremap <C-a> <Home>
inoremap <expr><C-e> pumvisible() ? "\<C-e>" : "\<End>"

inoremap <C-]>a <Home>
inoremap <C-]>e <End>
inoremap <C-]>f <S-Right>
inoremap <C-]>b <S-Left>
inoremap <C-]>d <Delete>
inoremap <C-]><C-a> <Home>
inoremap <C-]><C-e> <End>
inoremap <C-]><C-f> <S-Right>
inoremap <C-]><C-b> <S-Left>
inoremap <C-]><C-d> <Delete>

inoremap <C-w> <C-g>u<C-w>
inoremap <C-u> <C-g>u<C-u>

cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-f> <Right>
cnoremap <C-b> <Left>
cnoremap <C-d> <Delete>
cnoremap <C-x> <C-r>=substitute(expand('%:p:h'), ' ', '\\v:val', 'e')<CR>/

cnoremap <C-]>a <Home>
cnoremap <C-]>e <End>
"cnoremap <C-]>f <C-f>
cnoremap <C-]>f <S-Right>
cnoremap <C-]>b <S-Left>
cnoremap <C-]>d <Delete>
cnoremap <C-]>i <C-d>
cnoremap <C-]><C-a> <Home>
cnoremap <C-]><C-e> <End>
cnoremap <C-]><C-f> <S-Right>
cnoremap <C-]><C-b> <S-Left>
cnoremap <C-]><C-d> <Delete>
cnoremap <C-]><C-i> <C-d>

onoremap aa a>
vnoremap aa a>
onoremap ia i>
vnoremap ia i>
onoremap ar a]
vnoremap ar a]
onoremap ir i]
vnoremap ir i]
onoremap ak a)
vnoremap ak a)
onoremap ik i)
vnoremap ik i)

" }}}
" commands {{{1
if s:standalone
  function! SudoRead(url) "{{{2
    if a:url=="<afile>"
      let file=expand(a:url)
    else
      let file=a:url
    endif
    let prot=matchstr(file,'^\(sudo\)\ze:')
    if '' != prot
      let file=strpart(file,strlen(prot)+1)
    endif
    0,$d
    call setline(1,"foo")
    exec '1read !sudo cat "'.file.'" '
    1d
    set nomod
    filetype detect
  endfunction

  function! SudoWrite(url) abort "{{{2
    let file = a:url == "<afile>" ? expand(a:url) : a:url
    let prot=matchstr(file,'^\(sudo\)\ze:')
    if '' != prot
      let file=strpart(file,strlen(prot)+1)
    endif
    set nomodified
    execute '%write !sudo tee >/dev/null "'.file.'"'
  endf
 " commands {{{2
  command! -nargs=1 SudoRead call SudoRead(<f-args>)
  command! -nargs=1 SudoWrite call SudoWrite(<f-args>)
  command! SW w sudo:%
  command! SR read sudo:%
  augroup Sudo
    autocmd!
    au BufReadCmd	sudo:*,sudo:*/* SudoRead <afile>
    au FileReadCmd	sudo:*,sudo:*/* SudoRead <afile>
    au BufWriteCmd	sudo:*,sudo:*/* SudoWrite <afile>
    au FileWriteCmd	sudo:*,sudo:*/* SudoWrite <afile>
  augroup END
endif
" }}}
" plugin {{{1
if v:version > 702
  if !s:standalone "{{{2
    if has('vim_starting')
      set runtimepath+=~/.vim/neobundle.vim
    endif
    call neobundle#rc(expand("~/.vim/neobundle"))

    " minimum plugin
    NeoBundle 'Shougo/unite.vim', {
          \   'autoload': { 'commands' : ['Unite', 'UniteBookmarkAdd'] },
          \ }
    NeoBundleLazy 'Shougo/vimfiler.vim', {
          \ 'depends': 'Shougo/unite.vim', 'autoload' : {
          \ 'commands' : [
          \ { 'name' : 'VimFiler', 'complete' : 'customlist,vimfiler#complete' },
          \ { 'name' : 'VimFilerExplorer', 'complete' : 'customlist,vimfiler#complete' },
          \ { 'name' : 'Edit', 'complete' : 'customlist,vimfiler#complete' },
          \ { 'name' : 'Write', 'complete' : 'customlist,vimfiler#complete' },
          \ 'Read', 'Source'],
          \ 'mappings' : ['<Plug>(vimfiler'],
          \ 'explorer' : 1,
          \ }}
    NeoBundle 'Shougo/vimproc.vim', { 'build' : {
          \ 'cygwin' : 'make -f make_cygwin.mak',
          \ 'mac'    : 'make -f make_mac.mak',
          \ 'unix'   : 'make -f make_unix.mak',
          \ }}
    NeoBundleLazy 'Shougo/vimshell', {
          \ 'depends': 'Shougo/vimproc.vim', 'autoload' : {
          \ 'commands' : [{ 'name' : 'VimShell',
          \ 'complete' : 'customlist,vimshell#complete'},
          \   'VimShellExecute', 'VimShellInteractive',
          \   'VimShellTerminal', 'VimShellPop'],
          \ 'mappings' : ['<Plug>(vimshell']
          \ }}
    NeoBundle 'kana/vim-operator-user'
    NeoBundle 'kana/vim-operator-replace', {
          \ 'depends' : 'vim-operator-user', 'autoload' : {
          \ 'mappings' : [
          \ ['nx', '_', '<Plug>(operator-replace)']]
          \ }}
    NeoBundle 'anyakichi/vim-surround', {'autoload':{
          \ 'mappings': [['n', 'ds', 'cs', 'ys', 'yS', 'yss', 'ygs', 'ygS', 'ygss', 'ygsgs'],
          \ ['x', 's', 'S', 'gs', 'gS'],
          \ ['i', '<C-S>', '<C-G>s', '<C-G>S']],
          \ }}
    NeoBundle 'tpope/vim-fugitive'
    NeoBundle 'rhysd/committia.vim'
    NeoBundle 'idanarye/vim-merginal', {'autoload':{
          \ 'commands': [ "Merginal", "MerginalToggle", "MerginalClose",],
          \ }}
    NeoBundle 'AndrewRadev/gapply.vim', {'autoload':{
          \ 'commands': [ "Gapply",],
          \ }}
    NeoBundleLazy 'vim-scripts/DirDiff.vim', {'autoload': {
    \ 'commands' : [
    \   'DirDiffOpen', 'DirDiffNext', 'DirDiffPrev',
    \   'DirDiffUpdate', 'DirDiffQuit',
    \   {'name': 'DirDiff', 'complete': 'dir'},
    \ ],
    \ }}
    NeoBundle 'vim-scripts/sudo.vim'
    " NeoBundle 'chrisbra/SudoEdit.vim'
    NeoBundle 'tpope/vim-commentary', {'autoload': {
          \ 'mappings': [
          \   ['xn', '<Plug>Commentary'],
          \   ['n', '<Plug>Commentary'],
          \ ],
          \ }}
  elseif s:standalone " plugin load {{{2
    if has('vim_starting')
      filetype off
      silent call pathogen#infect()
    endif

    " enable some plugin {{{3
    runtime macros/matchit.vim

    " mkdir -p ~/.vim/autoload ~/.vim/bundle; curl -Lso ~/.vim/autoload/pathogen.vim https://raw.github.com/tpope/vim-pathogen/HEAD/autoload/pathogen.vim; mkdir -p ~/.vim/bundle ; cd ~/.vim/bundle;
    " git clone https://github.com/Shougo/vimfiler.git
    " git clone https://github.com/Shougo/unite.vim.git
    " curl -L https://github.com/Shougo/vimfiler/tarball/master | tar zxv
    " curl -L https://github.com/Shougo/unite.vim/tarball/master | tar zxv

    function! s:plugin_install() " {{{3
      let repos = [
      \ 'https://github.com/Shougo/vimfiler',
      \ 'https://github.com/Shougo/unite.vim',
      \ 'https://github.com/kana/vim-operator-replace',
      \ 'https://github.com/kana/vim-operator-user',
      \ ]
      if input("install plugin? [y/n]:") != "y"
        echo "Canceled."
        return
      endif
      call mkdir(exppand('~/.vim'))
      call mkdir(expand("~/.vim/autoload"))
      call mkdir(expand("~/.vim/bundle"))
      call system("curl -Lso ~/.vim/autoload/pathogen.vim https://raw.github.com/tpope/vim-pathogen/HEAD/autoload/pathogen.vim")
      let cwd = getcwd()
      execute 'lcd' expand('~/.vim/bundle')
      for repo in repos
        if executable('git')
          call system(printf('git clone %s.git', repo))
          call system('git clone https://github.com/Shougo/unite.vim.git')
        else
          call system(printf('curl -L %s/tarball/master | tar zxv', repo))
        endif
      endfor

      execute 'lcd' cwd
    endfunction
    command! -nargs=0 PluginInstall call s:plugin_install()
  endif
endif "}}}
" plugin and colors {{{1
filetype indent plugin on
syntax enable

set background=dark
colorscheme vividchalk

" some autocmd {{{1
MyAutoCmd FileType txt,rst,markdown,gitcommit setlocal spell
if !s:is_win
  MyAutoCmd BufWritePost *
        \ if getline(1) =~ "^#!"
        \ | exe "silent !chmod +x %"
        \ | endif
endif
function! s:auto_mkdir(dir, force) "{{{
  if !isdirectory(a:dir) && (a:force ||
        \ input(printf('"%s" does not exist. Create? [y/N]', a:dir)) =~? '^y\%[es]$')
    call mkdir(iconv(a:dir, &encoding, &termencoding), 'p')
  endif
endfunction "}}}
MyAutoCmd BufWritePre * call s:auto_mkdir(expand('<afile>:p:h'), v:cmdbang)

" plugin settings {{{1
let g:vimrc_enabled_plugins = {}
" vimfiler "{{{2
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_safe_mode_by_default = 0
" let g:vimfiler_edit_command = 'new'

" unite.vim "{{{2
if s:has_plugin('unite.vim')
  let g:unite_data_directory = $VIM_CACHE . '/vim-unite'
  nnoremap [unite] <Nop>
  nmap     f       [unite]
  nnoremap [unite]f f
  let g:unite_enable_start_insert=0
  let g:unite_source_file_mru_limit=200
  let g:unite_source_file_mru_time_format = ''
  let g:unite_winheight = 20
  let g:unite_source_file_ignore_pattern = '\%(^\|/\)\.$\|\~$\|\.\%(o|exe|dll|bak|sw[po]\)$\|/chalice_cache/\|/-Tmp-/'

  nmap <silent> [unite]j       :<C-u>Unite buffer_tab<CR>
  nmap <silent> [unite]l       :<C-u>Unite file<CR>
  nmap <silent> [unite]m       :<C-u>Unite file_mru directory_mru<CR>
  nmap <silent> [unite]k       :<C-u>Unite tab<CR>
endif

if s:has_plugin('vimshell') "{{{2
  let g:vimshell_temporary_directory = $VIM_CACHE . "/vimshell"
  let g:vimshell_enable_smart_case = 1
  let g:vimshell_enable_auto_slash = 1

  let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
endif

if s:has_plugin('vim-operator-replace') "{{{2
  map _ <Plug>(operator-replace)
endif

if s:has_plugin('sudo.vim') || s:has_plugin('SudoEdit.vim') "{{{2
  command! SW w sudo:%
  command! SR read sudo:%
endif

if s:has_plugin('vim-commentary')
  xmap gc <Plug>Commentary
  nmap gc <Plug>Commentary
  nmap gcc <Plug>CommentaryLine
  nmap gcu <Plug>CommentaryUndo
endif

if s:has_plugin('vim-fugitive')
  if s:is_mac
    map <leader>1 :diffget //2 <Bar> duffupdate<CR>
    map <leader>2 :diffget //3 <Bar> duffupdate<CR>
    map <leader>3 :diffupdate <Bar>
      \ echo '<Leader>1 = merges from target branch(left buffer), '."\n"
      \ . '<Leader>2 = merges from merge branch(right buffer)'<CR>
  else
    map <leader>1 :diffget LOCAL <Bar> duffupdate<CR>
    map <leader>2 :diffget REMOTE <Bar> duffupdate<CR>
    map <leader>3 :diffupdate <Bar>
      \ echo '<Leader>1 = merges from target branch(left buffer), '."\n"
      \ . '<Leader>2 = merges from merge branch(right buffer)'<CR>
  endif

  nnoremap <silent> [!space]gd :<C-u>Gdiff --cached<CR>
  nnoremap <silent> [!space]gD :<C-u>Gdiff<CR>
  nnoremap <silent> [!space]gs :<C-u>Gstatus<CR>
  nnoremap [!space]gl :<C-u>silent Glog <Bar> Unite -no-quit quickfix<CR>
  nnoremap [!space]gL :<C-u>silent Glog -- <Bar> Unite -no-quit quickfix<CR>
  nnoremap [!space]gg :<C-u>call <SID>git_qfix('Ggrep -i "%s"')<CR>
  nnoremap [!space]ggr :<C-u>Unite -no-quit -start-insert vcs_grep<CR>
  nnoremap [!space]ggm :<C-u>call <SID>git_qfix('Glog --grep="%s"')<CR>
  nnoremap [!space]ggl :<C-u>call <SID>git_qfix('Glog -S="%s"')<CR>
  nnoremap [!space]gR :<C-u>Gremove<CR>
  nnoremap [!space]gm :<C-u>Gmove<Space>
  nnoremap [!space]ga :<C-u>Gwrite<CR>
  nnoremap [!space]gA :<C-u>Gwrite <cfile><CR>
  nnoremap <silent> [!space]gc :<C-u>Gcommit<CR>
  nnoremap <silent> [!space]gC :<C-u>Gcommit --amend<CR>
  nnoremap <silent> [!space]gb :<C-u>Gblame<CR>
  nnoremap <silent> [!space]gB :<C-u>Gbrowse<CR>
  nnoremap <silent> [!space]gp :<C-u>Git push
  nnoremap <silent> [!space]ge :<C-u>Gedit<Space>
  nnoremap <silent> [!space]gv :<C-u>Gitv<CR>
  nnoremap <silent> [!space]gV :<C-u>Gitv!<CR>
  command! Gdiffoff diffoff | q | Gedit
endif
" __END__ {{{1
" vim:fdm=marker sw=2 ts=2 ft=vim expandtab:
