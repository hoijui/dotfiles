# [ $SHLVL -gt 1 ] && return 0
[ -f $HOME/.shrc.functions ] && source $HOME/.shrc.functions
[ -f $HOME/.shrc.common.langutil ] && source $HOME/.shrc.common.langutil

# OS settings {{{1
if is_win ; then
  export CYGWIN='cygwin'
  [ -e $HOME/.shrc.common.cygwin ] && source $HOME/.shrc.common.cygwin
  [ -d $HOME/bin/windows ] && PATH=$HOME/bin/windows:$PATH
elif is_mac ; then
  [ -e $HOME/.shrc.common.mac ] && source $HOME/.shrc.common.mac
  if [ -e "/usr/local/Library/Homebrew" ] ; then
    remove_path /usr/local/bin /usr/bin
    PATH=$PATH:/usr/local/bin:/usr/bin
    export PYTHONPATH=/usr/local/lib/python:$PYTHONPATH
  fi
  for fp in "/Applications/android-sdk-mac_x86/tools" \
    "/Applications/android-sdk-mac_x86/platform-tools" ; do
    [ -e $fp ] && PATH=$PATH:$fp
  done
  [ -d $HOME/bin/mac ] && PATH=$HOME/bin/mac:$PATH
  [ "$LANG" = "ja_JP" ] && export LANG=ja_JP.UTF-8
fi

# aliases
is_exec rails && alias r=rails
alias jsprove='prove --ext=.t.js --exec=node'
alias phpprove='prove --ext=.t.php --exec=php'

# block multi load {{{1
# [ x$__VMLANG_INITIALIZED != x ] && return 0
# export __VMLANG_INITIALIZED=1

[ -d $HOME/bin ] && PATH=$HOME/bin:$PATH
[ -d $HOME/.bin ] && PATH=$HOME/.bin:$PATH

_SHELL_NAME=""
[ -n "$BASH_VERSION" ] && _SHELL_NAME="bash"
[ -n "$ZSH_VERSION" ] && _SHELL_NAME="zsh"

# languages {{{1
# for perl {{{2
if [ -e $HOME/perl5 ]; then
  export PERLBREW_ROOT=$HOME/perl5/perlbrew
  PATH=$HOME/perl5/bin:$PATH
else
  export PERLBREW_ROOT=$HOME/.perlbrew
fi
if [ -s $PERLBREW_ROOT/etc/bashrc ] ;then
  PATH=$PERLBREW_ROOT/bin:$PATH
  source $PERLBREW_ROOT/etc/bashrc
fi

# for Python {{{2
export PYTHONBREW_ROOT=$HOME/.pythonbrew
[ -e $PYTHONBREW_ROOT/etc/bashrc ] && source $PYTHONBREW_ROOT/etc/bashrc
#export PYTHONPATH=/usr/local/lib/python2.5/site-packages:$ROOTSYS/lib
export PYTHONPATH=~/.lib/python
export PYTHONSTARTUP=~/.pyrc
export PIP_DOWNLOAD_CACHE="$HOME/.pip_cache"

# for Ruby {{{2
if [ -e $HOME/.rbenv ]; then
  PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
  [ -e $HOME/.rbenv/completions/rbenv.${_SHELL_NAME} ] && source $HOME/.rbenv/completions/rbenv.${_SHELL_NAME}
else
  [ -s $HOME/.rvm/scripts/rvm ] && source $HOME/.rvm/scripts/rvm
fi

# for node.js {{{2
if [ -s $HOME/.nvm/nvm.sh ] ; then
  source $HOME/.nvm/nvm.sh
  . <(npm completion)
  # nvm use $(nvm ls | head -1 | sed -e 's/\/.*//')
fi
if [ -s $HOME/.nave/nave.sh ]; then
  alias nave='$HOME/.nave/nave.sh'
  # if [ ${NAVELVL-0} -lt 1 ] ; then
  #   $HOME/.nave/nave.sh use stable > /dev/null 2>&1
  # fi
fi

if [ ! -e $HOME/.node_libraries ]; then
  mkdir -p ~/.node_libraries/bin
  mkdir -p ~/.node_libraries/share/man
fi
PATH=$HOME/.node_libraries/bin:$PATH
MANPATH=$HOME/.node_libraries/share/man:$MANPATH
NODE_PATH=$HOME/.node_libraries:$NODE_PATH
export NODE_PATH

# if [ -s $HOME/.nave/nave.sh ] ; then
  # alias nave=$HOME/.nave/nave.sh
  # alias npm_install='curl http://npmjs.org/install.sh | sh'
# fi

# java {{{2
if is_mac ; then
  _JAVA_OPTIONS="$_JAVA_OPTIONS -Dawt.useSystemAAFontSettings=on"
else
  _JAVA_OPTIONS="$_JAVA_OPTIONS -Dawt.useSystemAAFontSettings=lcd"
fi
if [ "$LANG" = 'ja_JP.UTF-8' ] ; then
  _JAVA_OPTIONS="$_JAVA_OPTIONS -Dfile.encoding=UTF-8"
fi
export _JAVA_OPTIONS

if [ -d /usr/lib/jvm/java-6-sun ];then
  JAVA_HOME=/usr/lib/jvm/java-6-sun
  export JAVA_HOME
  if [ -d $JAVA_HOME/jre ];then
    JRE_HOME=$JAVA_HOME/jre
    export JRE_HOME
  fi
fi

# php {{{2
[ -e $HOME/.php-build ] && PATH=$HOME/.php-build/bin:$PATH
# must be after eval $(rbenv init)
if [ -e $HOME/.phpenv ]; then
  if [[ $PATH =~ \.rbenv/bin ]]; then
    PATH=$(echo $PATH | sed 's@.rbenv/bin@.rbenv/bin:'$HOME'/.phpenv/bin@')
  else
    PATH=$HOME/.phpenv/bin:$PATH
  fi
  eval "$(phpenv init -)"
  [ -e $HOME/.phpenv/completions/rbenv.${_SHELL_NAME} ] && source $HOME/.phpenv/completions/rbenv.${_SHELL_NAME}
fi

## cakephp {{{3
cake-dispatch() { #{{{
  local has_cd=0
  if [ -e app ]; then
    cd app
    has_cd=1
  fi
  local mode=$1
  shift

  case $mode in
    console)
      if [ -x Console/cake ] ; then
        Console/cake $*
      elif [ -x console/cake ]; then
        console/cake $*
      fi
      ;;
    clear-cache)
      [ -e ./tmp/cache ] && find ./tmp/cache -type f -name 'cake_*' -exec rm {} \;
      ;;
    *)
      echo "command not found $*"
      ;;
  esac

  if [ $has_cd -eq 1 ]; then
    cd ..
  fi
} #}}}
cake-c() {
  cake-dispatch console $*
}
bake() {
  cake-dispatch console bake $*
}
cake-cc() {
  cake-dispatch clear-cache $*
}
## }}}

# etc {{{2
# c/c++ library path
#export PATH=~/bin:$QTDIR/bin:$KDEDIR/bin:/usr/local/bin:/usr/local/X11R7/bin:/usr/bin:/bin:./:/usr/local/sbin:/usr/sbin:/sbin:$ROOTSYS/bin:$TETEX_BIN_PATH:/usr/local/jre/bin:/usr/local/RealPlayer
#export LD_LIBRARY_PATH=/usr/local/X11R7/lib:$QTDIR/lib:$KDEDIR/lib:/usr/local/lib:/usr/lib:/lib:$ROOTSYS/lib:/usr/local/firefox

# for KDE/QT 
#export KDEDIR=/usr/local/kde
#export QTDIR=/usr/local/qt

# for teTeX 
#export TETEX_PATH=/usr/local/teTeX
#export TEXMF=$TETEX_PATH/share/texmf
#export TETEX_BIN_PATH=$TETEX_PATH/bin/i686-pc-linux-gnu

  [ -e $HOME/.rbenv/completions/rbenv.${_SHELL_NAME} ] && source $HOME/.rbenv/completions/rbenv.${_SHELL_NAME}
# Mozilla Setting {{{2
export MOZ_NO_REMOTE=true

export PATH
export MANPATH

# vim: fdm=marker sw=2 ts=2 ft=zsh et:
