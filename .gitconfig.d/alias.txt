# vim:fdm=marker sw=2 ts=2 ft=gitconfig expandtab:
[alias]
  aliases = !git config --get-regexp '^alias\\.' | sed 's/alias\\.\\([^ ]*\\) \\(.*\\)/\\1\\\t => \\2/'
  merged = "!f () { git branch \"$@\" --merged  | grep -ve '^\\*' ; }; f"
  root = rev-parse --show-toplevel
  pwd  = rev-parse --show-cdup
  includes = !git config --get-regexp '^include\\.path' | sed 's/include\\.path \\(.*\\)/\\1/'
  me = !git config --get-regexp user
  statmail = "!f () { git shortlog --summary --email | awk '{arry[$NF] += $1;} END {for(i in arry) {print arry[i] \" \" i} }' | sort -n ; }; f"
  a = "!f() { local res=\"$(git status -s | peco --prompt \"git add :\" | awk '{ print $2 }')\"; \
  [ -n \"$res\" ] && git add ${res} ; \
  }; f"
  df = "!f() { local res=\"$(git log --date=short --pretty=format:'%h [%ad] : %s <%an>' | peco | awk '{ print $1 }' )\"; \
    local file; \
    [ -n \"$res\" ] && file=\"$(git diff --no-prefix $res | grep '^--- ' | peco | awk '{ print $2 }')\"; \
    [ -n \"$file\" ] && git diff --no-prefix $res $file; \
  }; f"
  re = "!f() { local res=\"$(git status -s | peco --prompt \"git reset :\" | awk '{ print $2 }' )\"; \
    [ -n \"$res\" ] && git reset $res; \
  }; f"
  ls = ls-files
  co = checkout
  mb = "!f () {\
      if [ $# -eq 0 -a `which peco` ]; then\
          git branch -a | grep -v '\\->' | sed -e 's/remotes\\///g' | peco --prompt 'merge\\> ' | tr -d ' \\*' | xargs -n 1 git merge;\
      elif [ $# -ge 1 ]; then\
          git merge ${@};\
      fi;\
  };f"
  db = "!f () {\
      if [ $# -eq 0 -a `which peco` ]; then\
          git branch | peco --prompt 'delete branch(es)\\> ' | tr -d ' \\*' | xargs git branch -d;\
      elif [ $# -ge 1 ]; then\
          git branch | grep ${@} | xargs git branch -d;\
      fi;\
  };f"
  cp = "!f () {\
      if [ $# -eq 0 -a `which peco` ]; then\
          git log --branches --oneline | peco --prompt 'cherry-pick\\> ' | awk '{print $1}' | xargs git cherry-pick;\
      elif [ $# -ge 1 ]; then\
          git cherry-pick ${@};\
      fi;\
  };f"
  drag = pull --rebase
  refresh = fetch --prune
  cob = "!f() { \
    local b=\"`git branch -a | peco --prompt \"git checkout :\"`\";\
    [ -n \"${b}\" ] && git checkout ${b} ;\
  }; f"
  untracked = status --untracked-files=normal
  ci = commit
  ca = commit --amend
  st = status
  logline = log --oneline --stat --branches
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
  tree = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)? %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative
  wdiff = diff --word-diff=color --unified=1
  dr = "!f () {\
      echo \"diff from $1^ to $1\";\
      git diff \"$1\"^..\"$1\";\
  };f"
  find = "!git ls-files | grep -i"
  branch-root = merge-base master HEAD
  remember = !git diff $(git branch-root)
  stt = status -uno
  ss = status -sb
  sl = shortlog -sn
  sb = show-branch
  reba = rebase --abort
  rebc = rebase --continue
  br = branch
  fixup = commit --amend -C HEAD
  today = log --oneline --since='12 hour ago'
  info = "!f() { git config -l | grep -e '^\\(remote\\|branch\\|submodule\\|user\\)' | sort ; }; f;"
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  graph = log --graph --date-order -C -M --pretty=format:\"<%h> %ad [%an] %Cgreen%d%Creset %s\" --all --date=short
  log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  logall = log-all
  loga = log-all
  diffh = !git diff `git log --oneline --branches | peco | awk '{print $1}' | rev | tac | rev`
  dh = !git diff `git log --oneline --branches | peco | awk '{print $1}' | rev | tac | rev`
  d = diff
  dm = diff master
  dw = diff --color-words
  dc = diff --cached
  ds = diff --staged
  d1 = diff HEAD~
  d2 = diff HEAD~~
  d3 = diff HEAD~~~
  d4 = diff HEAD~~~~
  d5 = diff HEAD~~~~~
  d10 = diff HEAD~~~~~~~~~~
  dt = difftool --dir-diff
  ; ignore = "!f() { local s=$1; shift; \
  ;   while [ $# -gt 0 ]; do s="$s,$1"; shift; done;\
  ;   curl -L "http://gitignore.io/api/$s"; }; f"
  pbcopy = !echo "$1" | pbcopy-wrapper
  export = "!f() {\n\
    for file in `git diff --name-only $1 $1^`; do \n\
    git archive --prefix=$2/ $1 $file | tar -xf - ; \n\
    done ; \n\
    }; f"
  pr-setup = config --add remote.origin.fetch +refs/pull/*/head:refs/remotes/origin/pr/*
  aconfig = "!f() { git config --list \"$@\" | grep -v -e '^include' | sed -e 's!\\(.*\\)=\\(.*\\)!git config \"\\1\" \"\\2\"!'; }; f"
  rconfig = "!f() { git config --list \"$@\" | grep -v -e '^include' | sed -e 's!\\(.*\\)=\\(.*\\)!git config --unset \"\\1\"!'; }; f"
  set-upstream = !"f() { if [ -n \"$1\" ]; then git remote add upstream $1; else echo 'usage: git set-upstream <url>' && exit 1; fi; }; f"
  sync-fork = !"git fetch upstream && git checkout master && git merge upstream/master"
  vimdiff = difftool --tool=vimdiff --no-prompt
  mru = for-each-ref --format='%(refname:short) (%(authordate:relative))' --sort=-committerdate refs/heads/

